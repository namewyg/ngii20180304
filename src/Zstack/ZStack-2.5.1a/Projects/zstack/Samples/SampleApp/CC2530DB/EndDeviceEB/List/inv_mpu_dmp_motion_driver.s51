///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        03/Jul/2019  09:48:55 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\Source\MPU6050 /
//                          \eMPL\inv_mpu_dmp_motion_driver.c                 /
//    Command line       =  -f H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5 /
//                          .1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ    /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f         /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO     /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk47 /
//                          4153686£©\ZStack-2.5.1a\Projects\zstack\Samples\S /
//                          ampleApp\Source\MPU6050\eMPL\inv_mpu_dmp_motion_d /
//                          river.c -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK   /
//                          -D MT_SYS_FUNC -D MT_ZDO_FUNC -D                  /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\EndDe /
//                          viceEB\List\ -lA H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk47415368 /
//                          6£©\ZStack-2.5.1a\Projects\zstack\Samples\SampleA /
//                          pp\CC2530DB\EndDeviceEB\List\ --diag_suppress     /
//                          Pe001,Pa010 -o H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£ /
//                          ©\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\EndDeviceEB\Obj\ -e --no_code_motion    /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5 /
//                          .1a\Projects\zstack\Samples\SampleApp\CC2530DB\   /
//                          -I H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5 /
//                          .1a\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \Source\ -I H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\Z /
//                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\Source\MPU6050\ -I                      /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\So /
//                          urce\MPU6050\eMPL\ -I H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474 /
//                          153686£©\ZStack-2.5.1a\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2530DB\..\..\..\ZMain\TI2530DB\ -I      /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\hal\include\ -I              /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\hal\target\CC2530EB\ -I      /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\mac\include\ -I              /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\mac\high_level\ -I           /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\mac\low_level\srf04\ -I      /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\mac\low_level\srf04\single_c /
//                          hip\ -I H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStac /
//                          k-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530 /
//                          DB\..\..\..\..\..\Components\mt\ -I               /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\osal\include\ -I             /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\services\saddr\ -I           /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\services\sdata\ -I           /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\af\ -I                 /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\nwk\ -I                /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\sapi\ -I               /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\sec\ -I                /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\sys\ -I                /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\zdo\ -I                /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\zmac\ -I                     /
//                          H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\zmac\f8w\ -Ohz               /
//    List file          =  H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\EndDe /
//                          viceEB\List\inv_mpu_dmp_motion_driver.s51         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME inv_mpu_dmp_motion_driver

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_DIV
        EXTERN ?FLT_MUL
        EXTERN ?FLT_TO_L
        EXTERN ?L_ADD
        EXTERN ?L_ADD_X
        EXTERN ?L_DIV_MOD
        EXTERN ?L_IOR
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?L_NEG
        EXTERN ?L_SHL
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SL_SHR
        EXTERN ?SS_SHR
        EXTERN ?S_SHL
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_GE_X
        EXTERN ?UL_SHR
        EXTERN ?UL_TO_FLT
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_Z

        PUBLIC ??dmp_enable_6x_lp_quat?relay
        FUNCTION ??dmp_enable_6x_lp_quat?relay,0203H
        PUBLIC ??dmp_enable_feature?relay
        FUNCTION ??dmp_enable_feature?relay,0203H
        PUBLIC ??dmp_enable_gyro_cal?relay
        FUNCTION ??dmp_enable_gyro_cal?relay,0203H
        PUBLIC ??dmp_enable_lp_quat?relay
        FUNCTION ??dmp_enable_lp_quat?relay,0203H
        PUBLIC ??dmp_get_enabled_features?relay
        FUNCTION ??dmp_get_enabled_features?relay,0203H
        PUBLIC ??dmp_get_fifo_rate?relay
        FUNCTION ??dmp_get_fifo_rate?relay,0203H
        PUBLIC ??dmp_get_pedometer_step_count?relay
        FUNCTION ??dmp_get_pedometer_step_count?relay,0203H
        PUBLIC ??dmp_get_pedometer_walk_time?relay
        FUNCTION ??dmp_get_pedometer_walk_time?relay,0203H
        PUBLIC ??dmp_load_motion_driver_firmware?relay
        FUNCTION ??dmp_load_motion_driver_firmware?relay,0203H
        PUBLIC ??dmp_read_fifo?relay
        FUNCTION ??dmp_read_fifo?relay,0203H
        PUBLIC ??dmp_register_android_orient_cb?relay
        FUNCTION ??dmp_register_android_orient_cb?relay,0203H
        PUBLIC ??dmp_register_tap_cb?relay
        FUNCTION ??dmp_register_tap_cb?relay,0203H
        PUBLIC ??dmp_set_accel_bias?relay
        FUNCTION ??dmp_set_accel_bias?relay,0203H
        PUBLIC ??dmp_set_fifo_rate?relay
        FUNCTION ??dmp_set_fifo_rate?relay,0203H
        PUBLIC ??dmp_set_gyro_bias?relay
        FUNCTION ??dmp_set_gyro_bias?relay,0203H
        PUBLIC ??dmp_set_interrupt_mode?relay
        FUNCTION ??dmp_set_interrupt_mode?relay,0203H
        PUBLIC ??dmp_set_orientation?relay
        FUNCTION ??dmp_set_orientation?relay,0203H
        PUBLIC ??dmp_set_pedometer_step_count?relay
        FUNCTION ??dmp_set_pedometer_step_count?relay,0203H
        PUBLIC ??dmp_set_pedometer_walk_time?relay
        FUNCTION ??dmp_set_pedometer_walk_time?relay,0203H
        PUBLIC ??dmp_set_shake_reject_thresh?relay
        FUNCTION ??dmp_set_shake_reject_thresh?relay,0203H
        PUBLIC ??dmp_set_shake_reject_time?relay
        FUNCTION ??dmp_set_shake_reject_time?relay,0203H
        PUBLIC ??dmp_set_shake_reject_timeout?relay
        FUNCTION ??dmp_set_shake_reject_timeout?relay,0203H
        PUBLIC ??dmp_set_tap_axes?relay
        FUNCTION ??dmp_set_tap_axes?relay,0203H
        PUBLIC ??dmp_set_tap_count?relay
        FUNCTION ??dmp_set_tap_count?relay,0203H
        PUBLIC ??dmp_set_tap_thresh?relay
        FUNCTION ??dmp_set_tap_thresh?relay,0203H
        PUBLIC ??dmp_set_tap_time?relay
        FUNCTION ??dmp_set_tap_time?relay,0203H
        PUBLIC ??dmp_set_tap_time_multi?relay
        FUNCTION ??dmp_set_tap_time_multi?relay,0203H
        PUBWEAK __Constant_14
        PUBWEAK __Constant_2000001
        PUBWEAK __Constant_3b86e0
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_43480000
        PUBWEAK __Constant_44c00000
        PUBWEAK __Constant_45000000
        PUBWEAK __Constant_45400000
        PUBWEAK __Constant_45800000
        PUBWEAK __Constant_45c00000
        PUBWEAK __Constant_46000000
        PUBWEAK __Constant_46400000
        PUBWEAK __Constant_46800000
        PUBWEAK __Constant_f1000000
        PUBLIC dmp_enable_6x_lp_quat
        FUNCTION dmp_enable_6x_lp_quat,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC dmp_enable_feature
        FUNCTION dmp_enable_feature,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC dmp_enable_gyro_cal
        FUNCTION dmp_enable_gyro_cal,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC dmp_enable_lp_quat
        FUNCTION dmp_enable_lp_quat,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC dmp_get_enabled_features
        FUNCTION dmp_get_enabled_features,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC dmp_get_fifo_rate
        FUNCTION dmp_get_fifo_rate,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC dmp_get_pedometer_step_count
        FUNCTION dmp_get_pedometer_step_count,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC dmp_get_pedometer_walk_time
        FUNCTION dmp_get_pedometer_walk_time,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC dmp_load_motion_driver_firmware
        FUNCTION dmp_load_motion_driver_firmware,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC dmp_read_fifo
        FUNCTION dmp_read_fifo,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME XSTACK, 82, STACK
        PUBLIC dmp_register_android_orient_cb
        FUNCTION dmp_register_android_orient_cb,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC dmp_register_tap_cb
        FUNCTION dmp_register_tap_cb,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC dmp_set_accel_bias
        FUNCTION dmp_set_accel_bias,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 48, STACK
        PUBLIC dmp_set_fifo_rate
        FUNCTION dmp_set_fifo_rate,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC dmp_set_gyro_bias
        FUNCTION dmp_set_gyro_bias,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC dmp_set_interrupt_mode
        FUNCTION dmp_set_interrupt_mode,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC dmp_set_orientation
        FUNCTION dmp_set_orientation,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC dmp_set_pedometer_step_count
        FUNCTION dmp_set_pedometer_step_count,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC dmp_set_pedometer_walk_time
        FUNCTION dmp_set_pedometer_walk_time,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC dmp_set_shake_reject_thresh
        FUNCTION dmp_set_shake_reject_thresh,021203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC dmp_set_shake_reject_time
        FUNCTION dmp_set_shake_reject_time,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC dmp_set_shake_reject_timeout
        FUNCTION dmp_set_shake_reject_timeout,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC dmp_set_tap_axes
        FUNCTION dmp_set_tap_axes,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC dmp_set_tap_count
        FUNCTION dmp_set_tap_count,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC dmp_set_tap_thresh
        FUNCTION dmp_set_tap_thresh,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC dmp_set_tap_time
        FUNCTION dmp_set_tap_time,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC dmp_set_tap_time_multi
        FUNCTION dmp_set_tap_time_multi,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
mpu_load_firmware   SYMBOL "mpu_load_firmware"
mpu_write_mem       SYMBOL "mpu_write_mem"
memcpy              SYMBOL "memcpy"
mpu_get_accel_sens  SYMBOL "mpu_get_accel_sens"
mpu_get_accel_fsr   SYMBOL "mpu_get_accel_fsr"
mpu_read_mem        SYMBOL "mpu_read_mem"
mpu_reset_fifo      SYMBOL "mpu_reset_fifo"
memset              SYMBOL "memset"
mpu_read_fifo_stream SYMBOL "mpu_read_fifo_stream"
mget_ms             SYMBOL "mget_ms"
??memcpy?relay      SYMBOL "?relay", memcpy
??memset?relay      SYMBOL "?relay", memset
??mget_ms?relay     SYMBOL "?relay", mget_ms
??mpu_get_accel_fsr?relay SYMBOL "?relay", mpu_get_accel_fsr
??mpu_get_accel_sens?relay SYMBOL "?relay", mpu_get_accel_sens
??mpu_load_firmware?relay SYMBOL "?relay", mpu_load_firmware
??mpu_read_fifo_stream?relay SYMBOL "?relay", mpu_read_fifo_stream
??mpu_read_mem?relay SYMBOL "?relay", mpu_read_mem
??mpu_reset_fifo?relay SYMBOL "?relay", mpu_reset_fifo
??mpu_write_mem?relay SYMBOL "?relay", mpu_write_mem
dmp_enable_6x_lp_quat SYMBOL "dmp_enable_6x_lp_quat"
??dmp_enable_6x_lp_quat?relay SYMBOL "?relay", dmp_enable_6x_lp_quat
dmp_enable_feature  SYMBOL "dmp_enable_feature"
??dmp_enable_feature?relay SYMBOL "?relay", dmp_enable_feature
dmp_enable_gyro_cal SYMBOL "dmp_enable_gyro_cal"
??dmp_enable_gyro_cal?relay SYMBOL "?relay", dmp_enable_gyro_cal
dmp_enable_lp_quat  SYMBOL "dmp_enable_lp_quat"
??dmp_enable_lp_quat?relay SYMBOL "?relay", dmp_enable_lp_quat
dmp_get_enabled_features SYMBOL "dmp_get_enabled_features"
??dmp_get_enabled_features?relay SYMBOL "?relay", dmp_get_enabled_features
dmp_get_fifo_rate   SYMBOL "dmp_get_fifo_rate"
??dmp_get_fifo_rate?relay SYMBOL "?relay", dmp_get_fifo_rate
dmp_get_pedometer_step_count SYMBOL "dmp_get_pedometer_step_count"
??dmp_get_pedometer_step_count?relay SYMBOL "?relay", dmp_get_pedometer_step_count
dmp_get_pedometer_walk_time SYMBOL "dmp_get_pedometer_walk_time"
??dmp_get_pedometer_walk_time?relay SYMBOL "?relay", dmp_get_pedometer_walk_time
dmp_load_motion_driver_firmware SYMBOL "dmp_load_motion_driver_firmware"
??dmp_load_motion_driver_firmware?relay SYMBOL "?relay", dmp_load_motion_driver_firmware
dmp_read_fifo       SYMBOL "dmp_read_fifo"
??dmp_read_fifo?relay SYMBOL "?relay", dmp_read_fifo
dmp_register_android_orient_cb SYMBOL "dmp_register_android_orient_cb"
??dmp_register_android_orient_cb?relay SYMBOL "?relay", dmp_register_android_orient_cb
dmp_register_tap_cb SYMBOL "dmp_register_tap_cb"
??dmp_register_tap_cb?relay SYMBOL "?relay", dmp_register_tap_cb
dmp_set_accel_bias  SYMBOL "dmp_set_accel_bias"
??dmp_set_accel_bias?relay SYMBOL "?relay", dmp_set_accel_bias
dmp_set_fifo_rate   SYMBOL "dmp_set_fifo_rate"
??dmp_set_fifo_rate?relay SYMBOL "?relay", dmp_set_fifo_rate
dmp_set_gyro_bias   SYMBOL "dmp_set_gyro_bias"
??dmp_set_gyro_bias?relay SYMBOL "?relay", dmp_set_gyro_bias
dmp_set_interrupt_mode SYMBOL "dmp_set_interrupt_mode"
??dmp_set_interrupt_mode?relay SYMBOL "?relay", dmp_set_interrupt_mode
dmp_set_orientation SYMBOL "dmp_set_orientation"
??dmp_set_orientation?relay SYMBOL "?relay", dmp_set_orientation
dmp_set_pedometer_step_count SYMBOL "dmp_set_pedometer_step_count"
??dmp_set_pedometer_step_count?relay SYMBOL "?relay", dmp_set_pedometer_step_count
dmp_set_pedometer_walk_time SYMBOL "dmp_set_pedometer_walk_time"
??dmp_set_pedometer_walk_time?relay SYMBOL "?relay", dmp_set_pedometer_walk_time
dmp_set_shake_reject_thresh SYMBOL "dmp_set_shake_reject_thresh"
??dmp_set_shake_reject_thresh?relay SYMBOL "?relay", dmp_set_shake_reject_thresh
dmp_set_shake_reject_time SYMBOL "dmp_set_shake_reject_time"
??dmp_set_shake_reject_time?relay SYMBOL "?relay", dmp_set_shake_reject_time
dmp_set_shake_reject_timeout SYMBOL "dmp_set_shake_reject_timeout"
??dmp_set_shake_reject_timeout?relay SYMBOL "?relay", dmp_set_shake_reject_timeout
dmp_set_tap_axes    SYMBOL "dmp_set_tap_axes"
??dmp_set_tap_axes?relay SYMBOL "?relay", dmp_set_tap_axes
dmp_set_tap_count   SYMBOL "dmp_set_tap_count"
??dmp_set_tap_count?relay SYMBOL "?relay", dmp_set_tap_count
dmp_set_tap_thresh  SYMBOL "dmp_set_tap_thresh"
??dmp_set_tap_thresh?relay SYMBOL "?relay", dmp_set_tap_thresh
dmp_set_tap_time    SYMBOL "dmp_set_tap_time"
??dmp_set_tap_time?relay SYMBOL "?relay", dmp_set_tap_time
dmp_set_tap_time_multi SYMBOL "dmp_set_tap_time_multi"
??dmp_set_tap_time_multi?relay SYMBOL "?relay", dmp_set_tap_time_multi

        EXTERN mpu_load_firmware
        FUNCTION mpu_load_firmware,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_write_mem
        FUNCTION mpu_write_mem,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_get_accel_sens
        FUNCTION mpu_get_accel_sens,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_get_accel_fsr
        FUNCTION mpu_get_accel_fsr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_read_mem
        FUNCTION mpu_read_mem,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_reset_fifo
        FUNCTION mpu_reset_fifo,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mpu_read_fifo_stream
        FUNCTION mpu_read_fifo_stream,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mget_ms
        FUNCTION mget_ms,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??mget_ms?relay
        FUNCTION ??mget_ms?relay,00H
        EXTERN ??mpu_get_accel_fsr?relay
        FUNCTION ??mpu_get_accel_fsr?relay,00H
        EXTERN ??mpu_get_accel_sens?relay
        FUNCTION ??mpu_get_accel_sens?relay,00H
        EXTERN ??mpu_load_firmware?relay
        FUNCTION ??mpu_load_firmware?relay,00H
        EXTERN ??mpu_read_fifo_stream?relay
        FUNCTION ??mpu_read_fifo_stream?relay,00H
        EXTERN ??mpu_read_mem?relay
        FUNCTION ??mpu_read_mem?relay,00H
        EXTERN ??mpu_reset_fifo?relay
        FUNCTION ??mpu_reset_fifo?relay,00H
        EXTERN ??mpu_write_mem?relay
        FUNCTION ??mpu_write_mem?relay,00H

// H:\ÏîÄ¿\2019.5\ÍúÍú£¨lwk474153686£©\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MPU6050\eMPL\inv_mpu_dmp_motion_driver.c
//    1 /*
//    2  $License:
//    3     Copyright (C) 2011-2012 InvenSense Corporation, All Rights Reserved.
//    4     See included License.txt for License information.
//    5  $
//    6  */
//    7 /**
//    8  *  @addtogroup  DRIVERS Sensor Driver Layer
//    9  *  @brief       Hardware drivers to communicate with sensors via I2C.
//   10  *
//   11  *  @{
//   12  *      @file       inv_mpu_dmp_motion_driver.c
//   13  *      @brief      DMP image and interface functions.
//   14  *      @details    All functions are preceded by the dmp_ prefix to
//   15  *                  differentiate among MPL and general driver function calls.
//   16  */
//   17 #include <stdio.h>
//   18 //#include <stdint.h>
//   19 #include <stdlib.h>
//   20 #include <string.h>
//   21 #include <math.h>
//   22 #include "inv_mpu.h"
//   23 #include "inv_mpu_dmp_motion_driver.h"
//   24 #include "dmpKey.h"
//   25 #include "dmpmap.h"
//   26 //#include "usart.h"
//   27 #include "delay.h"
//   28 
//   29 //¶¨ÒåÄ¿±ê°å²ÉÓÃMSP430
//   30 #define  MOTION_DRIVER_TARGET_MSP430
//   31 
//   32 /* The following functions must be defined for this platform:
//   33  * i2c_write(unsigned char slave_addr, unsigned char reg_addr,
//   34  *      unsigned char length, unsigned char const *data)
//   35  * i2c_read(unsigned char slave_addr, unsigned char reg_addr,
//   36  *      unsigned char length, unsigned char *data)
//   37  * delay_ms(unsigned long num_ms)
//   38  * get_ms(unsigned long *count)
//   39  */
//   40 #if defined MOTION_DRIVER_TARGET_MSP430
//   41 //#include "msp430.h"
//   42 //#include "msp430_clock.h"
//   43 #define delay_ms    delay_ms
//   44 #define get_ms      mget_ms
//   45 #define log_i 		printf
//   46 #define log_e  		printf
//   47 
//   48 #elif defined EMPL_TARGET_MSP430
//   49 #include "msp430.h"
//   50 #include "msp430_clock.h"
//   51 #include "log.h"
//   52 #define delay_ms    msp430_delay_ms
//   53 #define get_ms      msp430_get_clock_ms
//   54 #define log_i       MPL_LOGI
//   55 #define log_e       MPL_LOGE
//   56 
//   57 #elif defined EMPL_TARGET_UC3L0
//   58 /* Instead of using the standard TWI driver from the ASF library, we're using
//   59  * a TWI driver that follows the slave address + register address convention.
//   60  */
//   61 #include "delay.h"
//   62 #include "sysclk.h"
//   63 #include "log.h"
//   64 #include "uc3l0_clock.h"
//   65 /* delay_ms is a function already defined in ASF. */
//   66 #define get_ms  uc3l0_get_clock_ms
//   67 #define log_i       MPL_LOGI
//   68 #define log_e       MPL_LOGE
//   69 
//   70 #else
//   71 #error  Gyro driver is missing the system layer implementations.
//   72 #endif
//   73 
//   74 /* These defines are copied from dmpDefaultMPU6050.c in the general MPL
//   75  * releases. These defines may change for each DMP image, so be sure to modify
//   76  * these values when switching to a new image.
//   77  */
//   78 #define CFG_LP_QUAT             (2712)
//   79 #define END_ORIENT_TEMP         (1866)
//   80 #define CFG_27                  (2742)
//   81 #define CFG_20                  (2224)
//   82 #define CFG_23                  (2745)
//   83 #define CFG_FIFO_ON_EVENT       (2690)
//   84 #define END_PREDICTION_UPDATE   (1761)
//   85 #define CGNOTICE_INTR           (2620)
//   86 #define X_GRT_Y_TMP             (1358)
//   87 #define CFG_DR_INT              (1029)
//   88 #define CFG_AUTH                (1035)
//   89 #define UPDATE_PROP_ROT         (1835)
//   90 #define END_COMPARE_Y_X_TMP2    (1455)
//   91 #define SKIP_X_GRT_Y_TMP        (1359)
//   92 #define SKIP_END_COMPARE        (1435)
//   93 #define FCFG_3                  (1088)
//   94 #define FCFG_2                  (1066)
//   95 #define FCFG_1                  (1062)
//   96 #define END_COMPARE_Y_X_TMP3    (1434)
//   97 #define FCFG_7                  (1073)
//   98 #define FCFG_6                  (1106)
//   99 #define FLAT_STATE_END          (1713)
//  100 #define SWING_END_4             (1616)
//  101 #define SWING_END_2             (1565)
//  102 #define SWING_END_3             (1587)
//  103 #define SWING_END_1             (1550)
//  104 #define CFG_8                   (2718)
//  105 #define CFG_15                  (2727)
//  106 #define CFG_16                  (2746)
//  107 #define CFG_EXT_GYRO_BIAS       (1189)
//  108 #define END_COMPARE_Y_X_TMP     (1407)
//  109 #define DO_NOT_UPDATE_PROP_ROT  (1839)
//  110 #define CFG_7                   (1205)
//  111 #define FLAT_STATE_END_TEMP     (1683)
//  112 #define END_COMPARE_Y_X         (1484)
//  113 #define SKIP_SWING_END_1        (1551)
//  114 #define SKIP_SWING_END_3        (1588)
//  115 #define SKIP_SWING_END_2        (1566)
//  116 #define TILTG75_START           (1672)
//  117 #define CFG_6                   (2753)
//  118 #define TILTL75_END             (1669)
//  119 #define END_ORIENT              (1884)
//  120 #define CFG_FLICK_IN            (2573)
//  121 #define TILTL75_START           (1643)
//  122 #define CFG_MOTION_BIAS         (1208)
//  123 #define X_GRT_Y                 (1408)
//  124 #define TEMPLABEL               (2324)
//  125 #define CFG_ANDROID_ORIENT_INT  (1853)
//  126 #define CFG_GYRO_RAW_DATA       (2722)
//  127 #define X_GRT_Y_TMP2            (1379)
//  128 
//  129 #define D_0_22                  (22+512)
//  130 #define D_0_24                  (24+512)
//  131 
//  132 #define D_0_36                  (36)
//  133 #define D_0_52                  (52)
//  134 #define D_0_96                  (96)
//  135 #define D_0_104                 (104)
//  136 #define D_0_108                 (108)
//  137 #define D_0_163                 (163)
//  138 #define D_0_188                 (188)
//  139 #define D_0_192                 (192)
//  140 #define D_0_224                 (224)
//  141 #define D_0_228                 (228)
//  142 #define D_0_232                 (232)
//  143 #define D_0_236                 (236)
//  144 
//  145 #define D_1_2                   (256 + 2)
//  146 #define D_1_4                   (256 + 4)
//  147 #define D_1_8                   (256 + 8)
//  148 #define D_1_10                  (256 + 10)
//  149 #define D_1_24                  (256 + 24)
//  150 #define D_1_28                  (256 + 28)
//  151 #define D_1_36                  (256 + 36)
//  152 #define D_1_40                  (256 + 40)
//  153 #define D_1_44                  (256 + 44)
//  154 #define D_1_72                  (256 + 72)
//  155 #define D_1_74                  (256 + 74)
//  156 #define D_1_79                  (256 + 79)
//  157 #define D_1_88                  (256 + 88)
//  158 #define D_1_90                  (256 + 90)
//  159 #define D_1_92                  (256 + 92)
//  160 #define D_1_96                  (256 + 96)
//  161 #define D_1_98                  (256 + 98)
//  162 #define D_1_106                 (256 + 106)
//  163 #define D_1_108                 (256 + 108)
//  164 #define D_1_112                 (256 + 112)
//  165 #define D_1_128                 (256 + 144)
//  166 #define D_1_152                 (256 + 12)
//  167 #define D_1_160                 (256 + 160)
//  168 #define D_1_176                 (256 + 176)
//  169 #define D_1_178                 (256 + 178)
//  170 #define D_1_218                 (256 + 218)
//  171 #define D_1_232                 (256 + 232)
//  172 #define D_1_236                 (256 + 236)
//  173 #define D_1_240                 (256 + 240)
//  174 #define D_1_244                 (256 + 244)
//  175 #define D_1_250                 (256 + 250)
//  176 #define D_1_252                 (256 + 252)
//  177 #define D_2_12                  (512 + 12)
//  178 #define D_2_96                  (512 + 96)
//  179 #define D_2_108                 (512 + 108)
//  180 #define D_2_208                 (512 + 208)
//  181 #define D_2_224                 (512 + 224)
//  182 #define D_2_236                 (512 + 236)
//  183 #define D_2_244                 (512 + 244)
//  184 #define D_2_248                 (512 + 248)
//  185 #define D_2_252                 (512 + 252)
//  186 
//  187 #define CPASS_BIAS_X            (35 * 16 + 4)
//  188 #define CPASS_BIAS_Y            (35 * 16 + 8)
//  189 #define CPASS_BIAS_Z            (35 * 16 + 12)
//  190 #define CPASS_MTX_00            (36 * 16)
//  191 #define CPASS_MTX_01            (36 * 16 + 4)
//  192 #define CPASS_MTX_02            (36 * 16 + 8)
//  193 #define CPASS_MTX_10            (36 * 16 + 12)
//  194 #define CPASS_MTX_11            (37 * 16)
//  195 #define CPASS_MTX_12            (37 * 16 + 4)
//  196 #define CPASS_MTX_20            (37 * 16 + 8)
//  197 #define CPASS_MTX_21            (37 * 16 + 12)
//  198 #define CPASS_MTX_22            (43 * 16 + 12)
//  199 #define D_EXT_GYRO_BIAS_X       (61 * 16)
//  200 #define D_EXT_GYRO_BIAS_Y       (61 * 16) + 4
//  201 #define D_EXT_GYRO_BIAS_Z       (61 * 16) + 8
//  202 #define D_ACT0                  (40 * 16)
//  203 #define D_ACSX                  (40 * 16 + 4)
//  204 #define D_ACSY                  (40 * 16 + 8)
//  205 #define D_ACSZ                  (40 * 16 + 12)
//  206 
//  207 #define FLICK_MSG               (45 * 16 + 4)
//  208 #define FLICK_COUNTER           (45 * 16 + 8)
//  209 #define FLICK_LOWER             (45 * 16 + 12)
//  210 #define FLICK_UPPER             (46 * 16 + 12)
//  211 
//  212 #define D_AUTH_OUT              (992)
//  213 #define D_AUTH_IN               (996)
//  214 #define D_AUTH_A                (1000)
//  215 #define D_AUTH_B                (1004)
//  216 
//  217 #define D_PEDSTD_BP_B           (768 + 0x1C)
//  218 #define D_PEDSTD_HP_A           (768 + 0x78)
//  219 #define D_PEDSTD_HP_B           (768 + 0x7C)
//  220 #define D_PEDSTD_BP_A4          (768 + 0x40)
//  221 #define D_PEDSTD_BP_A3          (768 + 0x44)
//  222 #define D_PEDSTD_BP_A2          (768 + 0x48)
//  223 #define D_PEDSTD_BP_A1          (768 + 0x4C)
//  224 #define D_PEDSTD_INT_THRSH      (768 + 0x68)
//  225 #define D_PEDSTD_CLIP           (768 + 0x6C)
//  226 #define D_PEDSTD_SB             (768 + 0x28)
//  227 #define D_PEDSTD_SB_TIME        (768 + 0x2C)
//  228 #define D_PEDSTD_PEAKTHRSH      (768 + 0x98)
//  229 #define D_PEDSTD_TIML           (768 + 0x2A)
//  230 #define D_PEDSTD_TIMH           (768 + 0x2E)
//  231 #define D_PEDSTD_PEAK           (768 + 0X94)
//  232 #define D_PEDSTD_STEPCTR        (768 + 0x60)
//  233 #define D_PEDSTD_TIMECTR        (964)
//  234 #define D_PEDSTD_DECI           (768 + 0xA0)
//  235 
//  236 #define D_HOST_NO_MOT           (976)
//  237 #define D_ACCEL_BIAS            (660)
//  238 
//  239 #define D_ORIENT_GAP            (76)
//  240 
//  241 #define D_TILT0_H               (48)
//  242 #define D_TILT0_L               (50)
//  243 #define D_TILT1_H               (52)
//  244 #define D_TILT1_L               (54)
//  245 #define D_TILT2_H               (56)
//  246 #define D_TILT2_L               (58)
//  247 #define D_TILT3_H               (60)
//  248 #define D_TILT3_L               (62)
//  249 
//  250 #define DMP_CODE_SIZE           (3062)
//  251 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  252 static const unsigned char dmp_memory[DMP_CODE_SIZE] = {
dmp_memory:
        DB 0
        DB 0
        DB 112
        DB 0
        DB 0
        DB 0
        DB 0
        DB 36
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 101
        DB 0
        DB 84
        DB 255
        DB 239
        DB 0
        DB 0
        DB 250
        DB 128
        DB 0
        DB 11
        DB 18
        DB 130
        DB 0
        DB 1
        DB 3
        DB 12
        DB 48
        DB 195
        DB 14
        DB 140
        DB 140
        DB 233
        DB 20
        DB 213
        DB 64
        DB 2
        DB 19
        DB 113
        DB 15
        DB 142
        DB 56
        DB 131
        DB 248
        DB 131
        DB 48
        DB 0
        DB 248
        DB 131
        DB 37
        DB 142
        DB 248
        DB 131
        DB 48
        DB 0
        DB 248
        DB 131
        DB 255
        DB 255
        DB 255
        DB 255
        DB 15
        DB 254
        DB 169
        DB 214
        DB 36
        DB 0
        DB 4
        DB 0
        DB 26
        DB 130
        DB 121
        DB 161
        DB 0
        DB 0
        DB 0
        DB 60
        DB 255
        DB 255
        DB 0
        DB 0
        DB 0
        DB 16
        DB 0
        DB 0
        DB 56
        DB 131
        DB 111
        DB 162
        DB 0
        DB 62
        DB 3
        DB 48
        DB 64
        DB 0
        DB 0
        DB 0
        DB 2
        DB 202
        DB 227
        DB 9
        DB 62
        DB 128
        DB 0
        DB 0
        DB 32
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 0
        DB 0
        DB 0
        DB 96
        DB 0
        DB 0
        DB 0
        DB 0
        DB 12
        DB 0
        DB 0
        DB 0
        DB 12
        DB 24
        DB 110
        DB 0
        DB 0
        DB 6
        DB 146
        DB 10
        DB 22
        DB 192
        DB 223
        DB 255
        DB 255
        DB 2
        DB 86
        DB 253
        DB 140
        DB 211
        DB 119
        DB 255
        DB 225
        DB 196
        DB 150
        DB 224
        DB 197
        DB 190
        DB 170
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 255
        DB 11
        DB 43
        DB 0
        DB 0
        DB 22
        DB 87
        DB 0
        DB 0
        DB 3
        DB 89
        DB 64
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 29
        DB 250
        DB 0
        DB 2
        DB 108
        DB 29
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 255
        DB 223
        DB 235
        DB 0
        DB 62
        DB 179
        DB 182
        DB 0
        DB 13
        DB 34
        DB 120
        DB 0
        DB 0
        DB 47
        DB 60
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 25
        DB 66
        DB 181
        DB 0
        DB 0
        DB 57
        DB 162
        DB 0
        DB 0
        DB 179
        DB 101
        DB 217
        DB 14
        DB 159
        DB 201
        DB 29
        DB 207
        DB 76
        DB 52
        DB 48
        DB 0
        DB 0
        DB 0
        DB 80
        DB 0
        DB 0
        DB 0
        DB 59
        DB 182
        DB 122
        DB 232
        DB 0
        DB 100
        DB 0
        DB 0
        DB 0
        DB 200
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 16
        DB 0
        DB 0
        DB 0
        DB 16
        DB 0
        DB 250
        DB 146
        DB 16
        DB 0
        DB 34
        DB 94
        DB 0
        DB 13
        DB 34
        DB 159
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 50
        DB 0
        DB 0
        DB 255
        DB 70
        DB 0
        DB 0
        DB 99
        DB 212
        DB 0
        DB 0
        DB 16
        DB 0
        DB 0
        DB 0
        DB 4
        DB 214
        DB 0
        DB 0
        DB 4
        DB 204
        DB 0
        DB 0
        DB 4
        DB 204
        DB 0
        DB 0
        DB 0
        DB 0
        DB 16
        DB 114
        DB 0
        DB 0
        DB 0
        DB 64
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 6
        DB 0
        DB 2
        DB 0
        DB 5
        DB 0
        DB 7
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 100
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 5
        DB 0
        DB 5
        DB 0
        DB 100
        DB 0
        DB 32
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 0
        DB 50
        DB 248
        DB 152
        DB 0
        DB 0
        DB 255
        DB 101
        DB 0
        DB 0
        DB 131
        DB 15
        DB 0
        DB 0
        DB 255
        DB 155
        DB 252
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 16
        DB 0
        DB 64
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 6
        DB 0
        DB 0
        DB 178
        DB 106
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 251
        DB 131
        DB 0
        DB 104
        DB 0
        DB 0
        DB 0
        DB 217
        DB 252
        DB 0
        DB 124
        DB 241
        DB 255
        DB 131
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 101
        DB 0
        DB 0
        DB 0
        DB 100
        DB 3
        DB 232
        DB 0
        DB 100
        DB 0
        DB 40
        DB 0
        DB 0
        DB 0
        DB 37
        DB 0
        DB 0
        DB 0
        DB 0
        DB 22
        DB 160
        DB 0
        DB 0
        DB 0
        DB 0
        DB 16
        DB 0
        DB 0
        DB 0
        DB 16
        DB 0
        DB 0
        DB 47
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 244
        DB 0
        DB 0
        DB 16
        DB 0
        DB 0
        DB 40
        DB 0
        DB 0
        DB 255
        DB 255
        DB 69
        DB 129
        DB 255
        DB 255
        DB 250
        DB 114
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 68
        DB 0
        DB 5
        DB 0
        DB 5
        DB 186
        DB 198
        DB 0
        DB 71
        DB 120
        DB 162
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 6
        DB 0
        DB 0
        DB 0
        DB 0
        DB 20
        DB 0
        DB 0
        DB 37
        DB 77
        DB 0
        DB 47
        DB 112
        DB 109
        DB 0
        DB 0
        DB 5
        DB 174
        DB 0
        DB 12
        DB 2
        DB 208
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 27
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 100
        DB 0
        DB 0
        DB 0
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 27
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 14
        DB 0
        DB 14
        DB 0
        DB 0
        DB 10
        DB 199
        DB 0
        DB 4
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 50
        DB 255
        DB 255
        DB 255
        DB 156
        DB 0
        DB 0
        DB 11
        DB 43
        DB 0
        DB 0
        DB 0
        DB 2
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 100
        DB 255
        DB 229
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 128
        DB 0
        DB 0
        DB 1
        DB 128
        DB 0
        DB 0
        DB 1
        DB 128
        DB 0
        DB 0
        DB 36
        DB 38
        DB 211
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 6
        DB 0
        DB 16
        DB 0
        DB 150
        DB 0
        DB 60
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 12
        DB 10
        DB 78
        DB 104
        DB 205
        DB 207
        DB 119
        DB 9
        DB 80
        DB 22
        DB 103
        DB 89
        DB 198
        DB 25
        DB 206
        DB 130
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 23
        DB 215
        DB 132
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 199
        DB 147
        DB 143
        DB 157
        DB 30
        DB 27
        DB 28
        DB 25
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 2
        DB 3
        DB 24
        DB 133
        DB 0
        DB 0
        DB 64
        DB 0
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 103
        DB 125
        DB 223
        DB 126
        DB 114
        DB 144
        DB 46
        DB 85
        DB 76
        DB 246
        DB 230
        DB 136
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 216
        DB 220
        DB 180
        DB 184
        DB 176
        DB 216
        DB 185
        DB 171
        DB 243
        DB 248
        DB 250
        DB 179
        DB 183
        DB 187
        DB 142
        DB 158
        DB 174
        DB 241
        DB 50
        DB 245
        DB 27
        DB 241
        DB 180
        DB 184
        DB 176
        DB 128
        DB 151
        DB 241
        DB 169
        DB 223
        DB 223
        DB 223
        DB 170
        DB 223
        DB 223
        DB 223
        DB 242
        DB 170
        DB 197
        DB 205
        DB 199
        DB 169
        DB 12
        DB 201
        DB 44
        DB 151
        DB 241
        DB 169
        DB 137
        DB 38
        DB 70
        DB 102
        DB 178
        DB 137
        DB 153
        DB 169
        DB 45
        DB 85
        DB 125
        DB 176
        DB 176
        DB 138
        DB 168
        DB 150
        DB 54
        DB 86
        DB 118
        DB 241
        DB 186
        DB 163
        DB 180
        DB 178
        DB 128
        DB 192
        DB 184
        DB 168
        DB 151
        DB 17
        DB 178
        DB 131
        DB 152
        DB 186
        DB 163
        DB 240
        DB 36
        DB 8
        DB 68
        DB 16
        DB 100
        DB 24
        DB 178
        DB 185
        DB 180
        DB 152
        DB 131
        DB 241
        DB 163
        DB 41
        DB 85
        DB 125
        DB 186
        DB 181
        DB 177
        DB 163
        DB 131
        DB 147
        DB 240
        DB 0
        DB 40
        DB 80
        DB 245
        DB 178
        DB 182
        DB 170
        DB 131
        DB 147
        DB 40
        DB 84
        DB 124
        DB 241
        DB 185
        DB 163
        DB 130
        DB 147
        DB 97
        DB 186
        DB 162
        DB 218
        DB 222
        DB 223
        DB 219
        DB 129
        DB 154
        DB 185
        DB 174
        DB 245
        DB 96
        DB 104
        DB 112
        DB 241
        DB 218
        DB 186
        DB 162
        DB 223
        DB 217
        DB 186
        DB 162
        DB 250
        DB 185
        DB 163
        DB 130
        DB 146
        DB 219
        DB 49
        DB 186
        DB 162
        DB 217
        DB 186
        DB 162
        DB 248
        DB 223
        DB 133
        DB 164
        DB 208
        DB 193
        DB 187
        DB 173
        DB 131
        DB 194
        DB 197
        DB 199
        DB 184
        DB 162
        DB 223
        DB 223
        DB 223
        DB 186
        DB 160
        DB 223
        DB 223
        DB 223
        DB 216
        DB 216
        DB 241
        DB 184
        DB 170
        DB 179
        DB 141
        DB 180
        DB 152
        DB 13
        DB 53
        DB 93
        DB 178
        DB 182
        DB 186
        DB 175
        DB 140
        DB 150
        DB 25
        DB 143
        DB 159
        DB 167
        DB 14
        DB 22
        DB 30
        DB 180
        DB 154
        DB 184
        DB 170
        DB 135
        DB 44
        DB 84
        DB 124
        DB 186
        DB 164
        DB 176
        DB 138
        DB 182
        DB 145
        DB 50
        DB 86
        DB 118
        DB 178
        DB 132
        DB 148
        DB 164
        DB 200
        DB 8
        DB 205
        DB 216
        DB 184
        DB 180
        DB 176
        DB 241
        DB 153
        DB 130
        DB 168
        DB 45
        DB 85
        DB 125
        DB 152
        DB 168
        DB 14
        DB 22
        DB 30
        DB 162
        DB 44
        DB 84
        DB 124
        DB 146
        DB 164
        DB 240
        DB 44
        DB 80
        DB 120
        DB 241
        DB 132
        DB 168
        DB 152
        DB 196
        DB 205
        DB 252
        DB 216
        DB 13
        DB 219
        DB 168
        DB 252
        DB 45
        DB 243
        DB 217
        DB 186
        DB 166
        DB 248
        DB 218
        DB 186
        DB 166
        DB 222
        DB 216
        DB 186
        DB 178
        DB 182
        DB 134
        DB 150
        DB 166
        DB 208
        DB 243
        DB 200
        DB 65
        DB 218
        DB 166
        DB 200
        DB 248
        DB 216
        DB 176
        DB 180
        DB 184
        DB 130
        DB 168
        DB 146
        DB 245
        DB 44
        DB 84
        DB 136
        DB 152
        DB 241
        DB 53
        DB 217
        DB 244
        DB 24
        DB 216
        DB 241
        DB 162
        DB 208
        DB 248
        DB 249
        DB 168
        DB 132
        DB 217
        DB 199
        DB 223
        DB 248
        DB 248
        DB 131
        DB 197
        DB 218
        DB 223
        DB 105
        DB 223
        DB 131
        DB 193
        DB 216
        DB 244
        DB 1
        DB 20
        DB 241
        DB 168
        DB 130
        DB 78
        DB 168
        DB 132
        DB 243
        DB 17
        DB 209
        DB 130
        DB 245
        DB 217
        DB 146
        DB 40
        DB 151
        DB 136
        DB 241
        DB 9
        DB 244
        DB 28
        DB 28
        DB 216
        DB 132
        DB 168
        DB 243
        DB 192
        DB 249
        DB 209
        DB 217
        DB 151
        DB 130
        DB 241
        DB 41
        DB 244
        DB 13
        DB 216
        DB 243
        DB 249
        DB 249
        DB 209
        DB 217
        DB 130
        DB 244
        DB 194
        DB 3
        DB 216
        DB 222
        DB 223
        DB 26
        DB 216
        DB 241
        DB 162
        DB 250
        DB 249
        DB 168
        DB 132
        DB 152
        DB 217
        DB 199
        DB 223
        DB 248
        DB 248
        DB 248
        DB 131
        DB 199
        DB 218
        DB 223
        DB 105
        DB 223
        DB 248
        DB 131
        DB 195
        DB 216
        DB 244
        DB 1
        DB 20
        DB 241
        DB 152
        DB 168
        DB 130
        DB 46
        DB 168
        DB 132
        DB 243
        DB 17
        DB 209
        DB 130
        DB 245
        DB 217
        DB 146
        DB 80
        DB 151
        DB 136
        DB 241
        DB 9
        DB 244
        DB 28
        DB 216
        DB 132
        DB 168
        DB 243
        DB 192
        DB 248
        DB 249
        DB 209
        DB 217
        DB 151
        DB 130
        DB 241
        DB 73
        DB 244
        DB 13
        DB 216
        DB 243
        DB 249
        DB 249
        DB 209
        DB 217
        DB 130
        DB 244
        DB 196
        DB 3
        DB 216
        DB 222
        DB 223
        DB 216
        DB 241
        DB 173
        DB 136
        DB 152
        DB 204
        DB 168
        DB 9
        DB 249
        DB 217
        DB 130
        DB 146
        DB 168
        DB 245
        DB 124
        DB 241
        DB 136
        DB 58
        DB 207
        DB 148
        DB 74
        DB 110
        DB 152
        DB 219
        DB 105
        DB 49
        DB 218
        DB 173
        DB 242
        DB 222
        DB 249
        DB 216
        DB 135
        DB 149
        DB 168
        DB 242
        DB 33
        DB 209
        DB 218
        DB 165
        DB 249
        DB 244
        DB 23
        DB 217
        DB 241
        DB 174
        DB 142
        DB 208
        DB 192
        DB 195
        DB 174
        DB 130
        DB 198
        DB 132
        DB 195
        DB 168
        DB 133
        DB 149
        DB 200
        DB 165
        DB 136
        DB 242
        DB 192
        DB 241
        DB 244
        DB 1
        DB 14
        DB 241
        DB 142
        DB 158
        DB 168
        DB 198
        DB 62
        DB 86
        DB 245
        DB 84
        DB 241
        DB 136
        DB 114
        DB 244
        DB 1
        DB 21
        DB 241
        DB 152
        DB 69
        DB 133
        DB 110
        DB 245
        DB 142
        DB 158
        DB 4
        DB 136
        DB 241
        DB 66
        DB 152
        DB 90
        DB 142
        DB 158
        DB 6
        DB 136
        DB 105
        DB 244
        DB 1
        DB 28
        DB 241
        DB 152
        DB 30
        DB 17
        DB 8
        DB 208
        DB 245
        DB 4
        DB 241
        DB 30
        DB 151
        DB 2
        DB 2
        DB 152
        DB 54
        DB 37
        DB 219
        DB 249
        DB 217
        DB 133
        DB 165
        DB 243
        DB 193
        DB 218
        DB 133
        DB 165
        DB 243
        DB 223
        DB 216
        DB 133
        DB 149
        DB 168
        DB 243
        DB 9
        DB 218
        DB 165
        DB 250
        DB 216
        DB 130
        DB 146
        DB 168
        DB 245
        DB 120
        DB 241
        DB 136
        DB 26
        DB 132
        DB 159
        DB 38
        DB 136
        DB 152
        DB 33
        DB 218
        DB 244
        DB 29
        DB 243
        DB 216
        DB 135
        DB 159
        DB 57
        DB 209
        DB 175
        DB 217
        DB 223
        DB 223
        DB 251
        DB 249
        DB 244
        DB 12
        DB 243
        DB 216
        DB 250
        DB 208
        DB 248
        DB 218
        DB 249
        DB 249
        DB 208
        DB 223
        DB 217
        DB 249
        DB 216
        DB 244
        DB 11
        DB 216
        DB 243
        DB 135
        DB 159
        DB 57
        DB 209
        DB 175
        DB 217
        DB 223
        DB 223
        DB 244
        DB 29
        DB 243
        DB 216
        DB 250
        DB 252
        DB 168
        DB 105
        DB 249
        DB 249
        DB 175
        DB 208
        DB 218
        DB 222
        DB 250
        DB 217
        DB 248
        DB 143
        DB 159
        DB 168
        DB 241
        DB 204
        DB 243
        DB 152
        DB 219
        DB 69
        DB 217
        DB 175
        DB 223
        DB 208
        DB 248
        DB 216
        DB 241
        DB 143
        DB 159
        DB 168
        DB 202
        DB 243
        DB 136
        DB 9
        DB 218
        DB 175
        DB 143
        DB 203
        DB 248
        DB 216
        DB 242
        DB 173
        DB 151
        DB 141
        DB 12
        DB 217
        DB 165
        DB 223
        DB 249
        DB 186
        DB 166
        DB 243
        DB 250
        DB 244
        DB 18
        DB 242
        DB 216
        DB 149
        DB 13
        DB 209
        DB 217
        DB 186
        DB 166
        DB 243
        DB 250
        DB 218
        DB 165
        DB 242
        DB 193
        DB 186
        DB 166
        DB 243
        DB 223
        DB 216
        DB 241
        DB 186
        DB 178
        DB 182
        DB 134
        DB 150
        DB 166
        DB 208
        DB 202
        DB 243
        DB 73
        DB 218
        DB 166
        DB 203
        DB 248
        DB 216
        DB 176
        DB 180
        DB 184
        DB 216
        DB 173
        DB 132
        DB 242
        DB 192
        DB 223
        DB 241
        DB 143
        DB 203
        DB 195
        DB 168
        DB 178
        DB 182
        DB 134
        DB 150
        DB 200
        DB 193
        DB 203
        DB 195
        DB 243
        DB 176
        DB 180
        DB 136
        DB 152
        DB 168
        DB 33
        DB 219
        DB 113
        DB 141
        DB 157
        DB 113
        DB 133
        DB 149
        DB 33
        DB 217
        DB 173
        DB 242
        DB 250
        DB 216
        DB 133
        DB 151
        DB 168
        DB 40
        DB 217
        DB 244
        DB 8
        DB 216
        DB 242
        DB 141
        DB 41
        DB 218
        DB 244
        DB 5
        DB 217
        DB 242
        DB 133
        DB 164
        DB 194
        DB 242
        DB 216
        DB 168
        DB 141
        DB 148
        DB 1
        DB 209
        DB 217
        DB 244
        DB 17
        DB 242
        DB 216
        DB 135
        DB 33
        DB 216
        DB 244
        DB 10
        DB 216
        DB 242
        DB 132
        DB 152
        DB 168
        DB 200
        DB 1
        DB 209
        DB 217
        DB 244
        DB 17
        DB 216
        DB 243
        DB 164
        DB 200
        DB 187
        DB 175
        DB 208
        DB 242
        DB 222
        DB 248
        DB 248
        DB 248
        DB 248
        DB 248
        DB 248
        DB 248
        DB 248
        DB 216
        DB 241
        DB 184
        DB 246
        DB 181
        DB 185
        DB 176
        DB 138
        DB 149
        DB 163
        DB 222
        DB 60
        DB 163
        DB 217
        DB 248
        DB 216
        DB 92
        DB 163
        DB 217
        DB 248
        DB 216
        DB 124
        DB 163
        DB 217
        DB 248
        DB 216
        DB 248
        DB 249
        DB 209
        DB 165
        DB 217
        DB 223
        DB 218
        DB 250
        DB 216
        DB 177
        DB 133
        DB 48
        DB 247
        DB 217
        DB 222
        DB 216
        DB 248
        DB 48
        DB 173
        DB 218
        DB 222
        DB 216
        DB 242
        DB 180
        DB 140
        DB 153
        DB 163
        DB 45
        DB 85
        DB 125
        DB 160
        DB 131
        DB 223
        DB 223
        DB 223
        DB 181
        DB 145
        DB 160
        DB 246
        DB 41
        DB 217
        DB 251
        DB 216
        DB 160
        DB 252
        DB 41
        DB 217
        DB 250
        DB 216
        DB 160
        DB 208
        DB 81
        DB 217
        DB 248
        DB 216
        DB 252
        DB 81
        DB 217
        DB 249
        DB 216
        DB 121
        DB 217
        DB 251
        DB 216
        DB 160
        DB 208
        DB 252
        DB 121
        DB 217
        DB 250
        DB 216
        DB 161
        DB 249
        DB 249
        DB 249
        DB 249
        DB 249
        DB 160
        DB 218
        DB 223
        DB 223
        DB 223
        DB 216
        DB 161
        DB 248
        DB 248
        DB 248
        DB 248
        DB 248
        DB 172
        DB 222
        DB 248
        DB 173
        DB 222
        DB 131
        DB 147
        DB 172
        DB 44
        DB 84
        DB 124
        DB 241
        DB 168
        DB 223
        DB 223
        DB 223
        DB 246
        DB 157
        DB 44
        DB 218
        DB 160
        DB 223
        DB 217
        DB 250
        DB 219
        DB 45
        DB 248
        DB 216
        DB 168
        DB 80
        DB 218
        DB 160
        DB 208
        DB 222
        DB 217
        DB 208
        DB 248
        DB 248
        DB 248
        DB 219
        DB 85
        DB 248
        DB 216
        DB 168
        DB 120
        DB 218
        DB 160
        DB 208
        DB 223
        DB 217
        DB 208
        DB 250
        DB 248
        DB 248
        DB 248
        DB 248
        DB 219
        DB 125
        DB 248
        DB 216
        DB 156
        DB 168
        DB 140
        DB 245
        DB 48
        DB 219
        DB 56
        DB 217
        DB 208
        DB 222
        DB 223
        DB 160
        DB 208
        DB 222
        DB 223
        DB 216
        DB 168
        DB 72
        DB 219
        DB 88
        DB 217
        DB 223
        DB 208
        DB 222
        DB 160
        DB 223
        DB 208
        DB 222
        DB 216
        DB 168
        DB 104
        DB 219
        DB 112
        DB 217
        DB 223
        DB 223
        DB 160
        DB 223
        DB 223
        DB 216
        DB 241
        DB 168
        DB 136
        DB 144
        DB 44
        DB 84
        DB 124
        DB 152
        DB 168
        DB 208
        DB 92
        DB 56
        DB 209
        DB 218
        DB 242
        DB 174
        DB 140
        DB 223
        DB 249
        DB 216
        DB 176
        DB 135
        DB 168
        DB 193
        DB 193
        DB 177
        DB 136
        DB 168
        DB 198
        DB 249
        DB 249
        DB 218
        DB 54
        DB 216
        DB 168
        DB 249
        DB 218
        DB 54
        DB 216
        DB 168
        DB 249
        DB 218
        DB 54
        DB 216
        DB 168
        DB 249
        DB 218
        DB 54
        DB 216
        DB 168
        DB 249
        DB 218
        DB 54
        DB 216
        DB 247
        DB 141
        DB 157
        DB 173
        DB 248
        DB 24
        DB 218
        DB 242
        DB 174
        DB 223
        DB 216
        DB 247
        DB 173
        DB 250
        DB 48
        DB 217
        DB 164
        DB 222
        DB 249
        DB 216
        DB 242
        DB 174
        DB 222
        DB 250
        DB 249
        DB 131
        DB 167
        DB 217
        DB 195
        DB 197
        DB 199
        DB 241
        DB 136
        DB 155
        DB 167
        DB 122
        DB 173
        DB 247
        DB 222
        DB 223
        DB 164
        DB 248
        DB 132
        DB 148
        DB 8
        DB 167
        DB 151
        DB 243
        DB 0
        DB 174
        DB 242
        DB 152
        DB 25
        DB 164
        DB 136
        DB 198
        DB 163
        DB 148
        DB 136
        DB 246
        DB 50
        DB 223
        DB 242
        DB 131
        DB 147
        DB 219
        DB 9
        DB 217
        DB 242
        DB 170
        DB 223
        DB 216
        DB 216
        DB 174
        DB 248
        DB 249
        DB 209
        DB 218
        DB 243
        DB 164
        DB 222
        DB 167
        DB 241
        DB 136
        DB 155
        DB 122
        DB 216
        DB 243
        DB 132
        DB 148
        DB 174
        DB 25
        DB 249
        DB 218
        DB 170
        DB 241
        DB 223
        DB 216
        DB 168
        DB 129
        DB 192
        DB 195
        DB 197
        DB 199
        DB 163
        DB 146
        DB 131
        DB 246
        DB 40
        DB 173
        DB 222
        DB 217
        DB 248
        DB 216
        DB 163
        DB 80
        DB 173
        DB 217
        DB 248
        DB 216
        DB 163
        DB 120
        DB 173
        DB 217
        DB 248
        DB 216
        DB 248
        DB 249
        DB 209
        DB 161
        DB 218
        DB 222
        DB 195
        DB 197
        DB 199
        DB 216
        DB 161
        DB 129
        DB 148
        DB 248
        DB 24
        DB 242
        DB 176
        DB 137
        DB 172
        DB 195
        DB 197
        DB 199
        DB 241
        DB 216
        DB 184
        DB 180
        DB 176
        DB 151
        DB 134
        DB 168
        DB 49
        DB 155
        DB 6
        DB 153
        DB 7
        DB 171
        DB 151
        DB 40
        DB 136
        DB 155
        DB 240
        DB 12
        DB 32
        DB 20
        DB 64
        DB 176
        DB 180
        DB 184
        DB 240
        DB 168
        DB 138
        DB 154
        DB 40
        DB 80
        DB 120
        DB 183
        DB 155
        DB 168
        DB 41
        DB 81
        DB 121
        DB 36
        DB 112
        DB 89
        DB 68
        DB 105
        DB 56
        DB 100
        DB 72
        DB 49
        DB 241
        DB 187
        DB 171
        DB 136
        DB 0
        DB 44
        DB 84
        DB 124
        DB 240
        DB 179
        DB 139
        DB 184
        DB 168
        DB 4
        DB 40
        DB 80
        DB 120
        DB 241
        DB 176
        DB 136
        DB 180
        DB 151
        DB 38
        DB 168
        DB 89
        DB 152
        DB 187
        DB 171
        DB 179
        DB 139
        DB 2
        DB 38
        DB 70
        DB 102
        DB 176
        DB 184
        DB 240
        DB 138
        DB 156
        DB 168
        DB 41
        DB 81
        DB 121
        DB 139
        DB 41
        DB 81
        DB 121
        DB 138
        DB 36
        DB 112
        DB 89
        DB 139
        DB 32
        DB 88
        DB 113
        DB 138
        DB 68
        DB 105
        DB 56
        DB 139
        DB 57
        DB 64
        DB 104
        DB 138
        DB 100
        DB 72
        DB 49
        DB 139
        DB 48
        DB 73
        DB 96
        DB 136
        DB 241
        DB 172
        DB 0
        DB 44
        DB 84
        DB 124
        DB 240
        DB 140
        DB 168
        DB 4
        DB 40
        DB 80
        DB 120
        DB 241
        DB 136
        DB 151
        DB 38
        DB 168
        DB 89
        DB 152
        DB 172
        DB 140
        DB 2
        DB 38
        DB 70
        DB 102
        DB 240
        DB 137
        DB 156
        DB 168
        DB 41
        DB 81
        DB 121
        DB 36
        DB 112
        DB 89
        DB 68
        DB 105
        DB 56
        DB 100
        DB 72
        DB 49
        DB 169
        DB 136
        DB 9
        DB 32
        DB 89
        DB 112
        DB 171
        DB 17
        DB 56
        DB 64
        DB 105
        DB 168
        DB 25
        DB 49
        DB 72
        DB 96
        DB 140
        DB 168
        DB 60
        DB 65
        DB 92
        DB 32
        DB 124
        DB 0
        DB 241
        DB 135
        DB 152
        DB 25
        DB 134
        DB 168
        DB 110
        DB 118
        DB 126
        DB 169
        DB 153
        DB 136
        DB 45
        DB 85
        DB 125
        DB 216
        DB 177
        DB 181
        DB 185
        DB 163
        DB 223
        DB 223
        DB 223
        DB 174
        DB 208
        DB 223
        DB 170
        DB 208
        DB 222
        DB 242
        DB 171
        DB 248
        DB 249
        DB 217
        DB 176
        DB 135
        DB 196
        DB 170
        DB 241
        DB 223
        DB 223
        DB 187
        DB 175
        DB 223
        DB 223
        DB 185
        DB 216
        DB 177
        DB 241
        DB 163
        DB 151
        DB 142
        DB 96
        DB 223
        DB 176
        DB 132
        DB 242
        DB 200
        DB 248
        DB 249
        DB 217
        DB 222
        DB 216
        DB 147
        DB 133
        DB 241
        DB 74
        DB 177
        DB 131
        DB 163
        DB 8
        DB 181
        DB 131
        DB 154
        DB 8
        DB 16
        DB 183
        DB 159
        DB 16
        DB 216
        DB 241
        DB 176
        DB 186
        DB 174
        DB 176
        DB 138
        DB 194
        DB 178
        DB 182
        DB 142
        DB 158
        DB 241
        DB 251
        DB 217
        DB 244
        DB 29
        DB 216
        DB 249
        DB 217
        DB 12
        DB 241
        DB 216
        DB 248
        DB 248
        DB 173
        DB 97
        DB 217
        DB 174
        DB 251
        DB 216
        DB 244
        DB 12
        DB 241
        DB 216
        DB 248
        DB 248
        DB 173
        DB 25
        DB 217
        DB 174
        DB 251
        DB 223
        DB 216
        DB 244
        DB 22
        DB 241
        DB 216
        DB 248
        DB 173
        DB 141
        DB 97
        DB 217
        DB 244
        DB 244
        DB 172
        DB 245
        DB 156
        DB 156
        DB 141
        DB 223
        DB 43
        DB 186
        DB 182
        DB 174
        DB 250
        DB 248
        DB 244
        DB 11
        DB 216
        DB 241
        DB 174
        DB 208
        DB 248
        DB 173
        DB 81
        DB 218
        DB 174
        DB 250
        DB 248
        DB 241
        DB 216
        DB 185
        DB 177
        DB 182
        DB 163
        DB 131
        DB 156
        DB 8
        DB 185
        DB 177
        DB 131
        DB 154
        DB 181
        DB 170
        DB 192
        DB 253
        DB 48
        DB 131
        DB 183
        DB 159
        DB 16
        DB 181
        DB 139
        DB 147
        DB 242
        DB 2
        DB 2
        DB 209
        DB 171
        DB 218
        DB 222
        DB 216
        DB 241
        DB 176
        DB 128
        DB 186
        DB 171
        DB 192
        DB 195
        DB 178
        DB 132
        DB 193
        DB 195
        DB 216
        DB 177
        DB 185
        DB 243
        DB 139
        DB 163
        DB 145
        DB 182
        DB 9
        DB 180
        DB 217
        DB 171
        DB 222
        DB 176
        DB 135
        DB 156
        DB 185
        DB 163
        DB 221
        DB 241
        DB 179
        DB 139
        DB 139
        DB 139
        DB 139
        DB 139
        DB 176
        DB 135
        DB 163
        DB 163
        DB 163
        DB 163
        DB 178
        DB 139
        DB 182
        DB 155
        DB 242
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 241
        DB 176
        DB 135
        DB 181
        DB 154
        DB 163
        DB 243
        DB 155
        DB 163
        DB 163
        DB 220
        DB 186
        DB 172
        DB 223
        DB 185
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 163
        DB 216
        DB 216
        DB 216
        DB 187
        DB 179
        DB 183
        DB 241
        DB 170
        DB 249
        DB 218
        DB 255
        DB 217
        DB 128
        DB 154
        DB 170
        DB 40
        DB 180
        DB 128
        DB 152
        DB 167
        DB 32
        DB 183
        DB 151
        DB 135
        DB 168
        DB 102
        DB 136
        DB 240
        DB 121
        DB 81
        DB 241
        DB 144
        DB 44
        DB 135
        DB 12
        DB 167
        DB 129
        DB 151
        DB 98
        DB 147
        DB 240
        DB 113
        DB 113
        DB 96
        DB 133
        DB 148
        DB 1
        DB 41
        DB 81
        DB 121
        DB 144
        DB 165
        DB 241
        DB 40
        DB 76
        DB 108
        DB 135
        DB 12
        DB 149
        DB 24
        DB 133
        DB 120
        DB 163
        DB 131
        DB 144
        DB 40
        DB 76
        DB 108
        DB 136
        DB 108
        DB 216
        DB 243
        DB 162
        DB 130
        DB 0
        DB 242
        DB 16
        DB 168
        DB 146
        DB 25
        DB 128
        DB 162
        DB 242
        DB 217
        DB 38
        DB 216
        DB 241
        DB 136
        DB 168
        DB 77
        DB 217
        DB 72
        DB 216
        DB 150
        DB 168
        DB 57
        DB 128
        DB 217
        DB 60
        DB 216
        DB 149
        DB 128
        DB 168
        DB 57
        DB 166
        DB 134
        DB 152
        DB 217
        DB 44
        DB 218
        DB 135
        DB 167
        DB 44
        DB 216
        DB 168
        DB 137
        DB 149
        DB 25
        DB 169
        DB 128
        DB 217
        DB 56
        DB 216
        DB 168
        DB 137
        DB 57
        DB 169
        DB 128
        DB 218
        DB 60
        DB 216
        DB 168
        DB 46
        DB 168
        DB 57
        DB 144
        DB 217
        DB 12
        DB 216
        DB 168
        DB 149
        DB 49
        DB 152
        DB 217
        DB 12
        DB 216
        DB 168
        DB 9
        DB 217
        DB 255
        DB 216
        DB 1
        DB 218
        DB 255
        DB 216
        DB 149
        DB 57
        DB 169
        DB 218
        DB 38
        DB 255
        DB 216
        DB 144
        DB 168
        DB 13
        DB 137
        DB 153
        DB 168
        DB 16
        DB 128
        DB 152
        DB 33
        DB 218
        DB 46
        DB 216
        DB 137
        DB 153
        DB 168
        DB 49
        DB 128
        DB 218
        DB 46
        DB 216
        DB 168
        DB 134
        DB 150
        DB 49
        DB 128
        DB 218
        DB 46
        DB 216
        DB 168
        DB 135
        DB 49
        DB 128
        DB 218
        DB 46
        DB 216
        DB 168
        DB 130
        DB 146
        DB 243
        DB 65
        DB 128
        DB 241
        DB 217
        DB 46
        DB 216
        DB 168
        DB 130
        DB 243
        DB 25
        DB 128
        DB 241
        DB 217
        DB 46
        DB 216
        DB 130
        DB 172
        DB 243
        DB 192
        DB 162
        DB 128
        DB 34
        DB 241
        DB 166
        DB 46
        DB 167
        DB 46
        DB 169
        DB 34
        DB 152
        DB 168
        DB 41
        DB 218
        DB 172
        DB 222
        DB 255
        DB 216
        DB 162
        DB 242
        DB 42
        DB 241
        DB 169
        DB 46
        DB 130
        DB 146
        DB 168
        DB 242
        DB 49
        DB 128
        DB 166
        DB 150
        DB 241
        DB 217
        DB 0
        DB 172
        DB 140
        DB 156
        DB 12
        DB 48
        DB 172
        DB 222
        DB 208
        DB 222
        DB 255
        DB 216
        DB 140
        DB 156
        DB 172
        DB 208
        DB 16
        DB 172
        DB 222
        DB 128
        DB 146
        DB 162
        DB 242
        DB 76
        DB 130
        DB 168
        DB 241
        DB 202
        DB 242
        DB 53
        DB 241
        DB 150
        DB 136
        DB 166
        DB 217
        DB 0
        DB 216
        DB 241
        DB 255
//  253     /* bank # 0 */
//  254     0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00,
//  255     0x00, 0x65, 0x00, 0x54, 0xff, 0xef, 0x00, 0x00, 0xfa, 0x80, 0x00, 0x0b, 0x12, 0x82, 0x00, 0x01,
//  256     0x03, 0x0c, 0x30, 0xc3, 0x0e, 0x8c, 0x8c, 0xe9, 0x14, 0xd5, 0x40, 0x02, 0x13, 0x71, 0x0f, 0x8e,
//  257     0x38, 0x83, 0xf8, 0x83, 0x30, 0x00, 0xf8, 0x83, 0x25, 0x8e, 0xf8, 0x83, 0x30, 0x00, 0xf8, 0x83,
//  258     0xff, 0xff, 0xff, 0xff, 0x0f, 0xfe, 0xa9, 0xd6, 0x24, 0x00, 0x04, 0x00, 0x1a, 0x82, 0x79, 0xa1,
//  259     0x00, 0x00, 0x00, 0x3c, 0xff, 0xff, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x38, 0x83, 0x6f, 0xa2,
//  260     0x00, 0x3e, 0x03, 0x30, 0x40, 0x00, 0x00, 0x00, 0x02, 0xca, 0xe3, 0x09, 0x3e, 0x80, 0x00, 0x00,
//  261     0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
//  262     0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x18, 0x6e, 0x00, 0x00, 0x06, 0x92, 0x0a, 0x16, 0xc0, 0xdf,
//  263     0xff, 0xff, 0x02, 0x56, 0xfd, 0x8c, 0xd3, 0x77, 0xff, 0xe1, 0xc4, 0x96, 0xe0, 0xc5, 0xbe, 0xaa,
//  264     0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x2b, 0x00, 0x00, 0x16, 0x57, 0x00, 0x00, 0x03, 0x59,
//  265     0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xfa, 0x00, 0x02, 0x6c, 0x1d, 0x00, 0x00, 0x00, 0x00,
//  266     0x3f, 0xff, 0xdf, 0xeb, 0x00, 0x3e, 0xb3, 0xb6, 0x00, 0x0d, 0x22, 0x78, 0x00, 0x00, 0x2f, 0x3c,
//  267     0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x42, 0xb5, 0x00, 0x00, 0x39, 0xa2, 0x00, 0x00, 0xb3, 0x65,
//  268     0xd9, 0x0e, 0x9f, 0xc9, 0x1d, 0xcf, 0x4c, 0x34, 0x30, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
//  269     0x3b, 0xb6, 0x7a, 0xe8, 0x00, 0x64, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  270     /* bank # 1 */
//  271     0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0xfa, 0x92, 0x10, 0x00, 0x22, 0x5e, 0x00, 0x0d, 0x22, 0x9f,
//  272     0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0xff, 0x46, 0x00, 0x00, 0x63, 0xd4, 0x00, 0x00,
//  273     0x10, 0x00, 0x00, 0x00, 0x04, 0xd6, 0x00, 0x00, 0x04, 0xcc, 0x00, 0x00, 0x04, 0xcc, 0x00, 0x00,
//  274     0x00, 0x00, 0x10, 0x72, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  275     0x00, 0x06, 0x00, 0x02, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
//  276     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x64, 0x00, 0x20, 0x00, 0x00,
//  277     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00,
//  278     0x00, 0x00, 0x00, 0x32, 0xf8, 0x98, 0x00, 0x00, 0xff, 0x65, 0x00, 0x00, 0x83, 0x0f, 0x00, 0x00,
//  279     0xff, 0x9b, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  280     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  281     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
//  282     0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0xb2, 0x6a, 0x00, 0x02, 0x00, 0x00,
//  283     0x00, 0x01, 0xfb, 0x83, 0x00, 0x68, 0x00, 0x00, 0x00, 0xd9, 0xfc, 0x00, 0x7c, 0xf1, 0xff, 0x83,
//  284     0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x64, 0x03, 0xe8, 0x00, 0x64, 0x00, 0x28,
//  285     0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x16, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
//  286     0x00, 0x00, 0x10, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf4, 0x00, 0x00, 0x10, 0x00,
//  287     /* bank # 2 */
//  288     0x00, 0x28, 0x00, 0x00, 0xff, 0xff, 0x45, 0x81, 0xff, 0xff, 0xfa, 0x72, 0x00, 0x00, 0x00, 0x00,
//  289     0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x05, 0x00, 0x05, 0xba, 0xc6, 0x00, 0x47, 0x78, 0xa2,
//  290     0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x14,
//  291     0x00, 0x00, 0x25, 0x4d, 0x00, 0x2f, 0x70, 0x6d, 0x00, 0x00, 0x05, 0xae, 0x00, 0x0c, 0x02, 0xd0,
//  292     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  293     0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  294     0x00, 0x64, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  295     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  296     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  297     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  298     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  299     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  300     0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x0e,
//  301     0x00, 0x00, 0x0a, 0xc7, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0xff, 0xff, 0xff, 0x9c,
//  302     0x00, 0x00, 0x0b, 0x2b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64,
//  303     0xff, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  304     /* bank # 3 */
//  305     0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  306     0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x24, 0x26, 0xd3,
//  307     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x96, 0x00, 0x3c,
//  308     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  309     0x0c, 0x0a, 0x4e, 0x68, 0xcd, 0xcf, 0x77, 0x09, 0x50, 0x16, 0x67, 0x59, 0xc6, 0x19, 0xce, 0x82,
//  310     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  311     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xd7, 0x84, 0x00, 0x03, 0x00, 0x00, 0x00,
//  312     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x93, 0x8f, 0x9d, 0x1e, 0x1b, 0x1c, 0x19,
//  313     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  314     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x18, 0x85, 0x00, 0x00, 0x40, 0x00,
//  315     0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  316     0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  317     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  318     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  319     0x00, 0x00, 0x00, 0x00, 0x67, 0x7d, 0xdf, 0x7e, 0x72, 0x90, 0x2e, 0x55, 0x4c, 0xf6, 0xe6, 0x88,
//  320     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//  321 
//  322     /* bank # 4 */
//  323     0xd8, 0xdc, 0xb4, 0xb8, 0xb0, 0xd8, 0xb9, 0xab, 0xf3, 0xf8, 0xfa, 0xb3, 0xb7, 0xbb, 0x8e, 0x9e,
//  324     0xae, 0xf1, 0x32, 0xf5, 0x1b, 0xf1, 0xb4, 0xb8, 0xb0, 0x80, 0x97, 0xf1, 0xa9, 0xdf, 0xdf, 0xdf,
//  325     0xaa, 0xdf, 0xdf, 0xdf, 0xf2, 0xaa, 0xc5, 0xcd, 0xc7, 0xa9, 0x0c, 0xc9, 0x2c, 0x97, 0xf1, 0xa9,
//  326     0x89, 0x26, 0x46, 0x66, 0xb2, 0x89, 0x99, 0xa9, 0x2d, 0x55, 0x7d, 0xb0, 0xb0, 0x8a, 0xa8, 0x96,
//  327     0x36, 0x56, 0x76, 0xf1, 0xba, 0xa3, 0xb4, 0xb2, 0x80, 0xc0, 0xb8, 0xa8, 0x97, 0x11, 0xb2, 0x83,
//  328     0x98, 0xba, 0xa3, 0xf0, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0xb2, 0xb9, 0xb4, 0x98, 0x83, 0xf1,
//  329     0xa3, 0x29, 0x55, 0x7d, 0xba, 0xb5, 0xb1, 0xa3, 0x83, 0x93, 0xf0, 0x00, 0x28, 0x50, 0xf5, 0xb2,
//  330     0xb6, 0xaa, 0x83, 0x93, 0x28, 0x54, 0x7c, 0xf1, 0xb9, 0xa3, 0x82, 0x93, 0x61, 0xba, 0xa2, 0xda,
//  331     0xde, 0xdf, 0xdb, 0x81, 0x9a, 0xb9, 0xae, 0xf5, 0x60, 0x68, 0x70, 0xf1, 0xda, 0xba, 0xa2, 0xdf,
//  332     0xd9, 0xba, 0xa2, 0xfa, 0xb9, 0xa3, 0x82, 0x92, 0xdb, 0x31, 0xba, 0xa2, 0xd9, 0xba, 0xa2, 0xf8,
//  333     0xdf, 0x85, 0xa4, 0xd0, 0xc1, 0xbb, 0xad, 0x83, 0xc2, 0xc5, 0xc7, 0xb8, 0xa2, 0xdf, 0xdf, 0xdf,
//  334     0xba, 0xa0, 0xdf, 0xdf, 0xdf, 0xd8, 0xd8, 0xf1, 0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35,
//  335     0x5d, 0xb2, 0xb6, 0xba, 0xaf, 0x8c, 0x96, 0x19, 0x8f, 0x9f, 0xa7, 0x0e, 0x16, 0x1e, 0xb4, 0x9a,
//  336     0xb8, 0xaa, 0x87, 0x2c, 0x54, 0x7c, 0xba, 0xa4, 0xb0, 0x8a, 0xb6, 0x91, 0x32, 0x56, 0x76, 0xb2,
//  337     0x84, 0x94, 0xa4, 0xc8, 0x08, 0xcd, 0xd8, 0xb8, 0xb4, 0xb0, 0xf1, 0x99, 0x82, 0xa8, 0x2d, 0x55,
//  338     0x7d, 0x98, 0xa8, 0x0e, 0x16, 0x1e, 0xa2, 0x2c, 0x54, 0x7c, 0x92, 0xa4, 0xf0, 0x2c, 0x50, 0x78,
//  339     /* bank # 5 */
//  340     0xf1, 0x84, 0xa8, 0x98, 0xc4, 0xcd, 0xfc, 0xd8, 0x0d, 0xdb, 0xa8, 0xfc, 0x2d, 0xf3, 0xd9, 0xba,
//  341     0xa6, 0xf8, 0xda, 0xba, 0xa6, 0xde, 0xd8, 0xba, 0xb2, 0xb6, 0x86, 0x96, 0xa6, 0xd0, 0xf3, 0xc8,
//  342     0x41, 0xda, 0xa6, 0xc8, 0xf8, 0xd8, 0xb0, 0xb4, 0xb8, 0x82, 0xa8, 0x92, 0xf5, 0x2c, 0x54, 0x88,
//  343     0x98, 0xf1, 0x35, 0xd9, 0xf4, 0x18, 0xd8, 0xf1, 0xa2, 0xd0, 0xf8, 0xf9, 0xa8, 0x84, 0xd9, 0xc7,
//  344     0xdf, 0xf8, 0xf8, 0x83, 0xc5, 0xda, 0xdf, 0x69, 0xdf, 0x83, 0xc1, 0xd8, 0xf4, 0x01, 0x14, 0xf1,
//  345     0xa8, 0x82, 0x4e, 0xa8, 0x84, 0xf3, 0x11, 0xd1, 0x82, 0xf5, 0xd9, 0x92, 0x28, 0x97, 0x88, 0xf1,
//  346     0x09, 0xf4, 0x1c, 0x1c, 0xd8, 0x84, 0xa8, 0xf3, 0xc0, 0xf9, 0xd1, 0xd9, 0x97, 0x82, 0xf1, 0x29,
//  347     0xf4, 0x0d, 0xd8, 0xf3, 0xf9, 0xf9, 0xd1, 0xd9, 0x82, 0xf4, 0xc2, 0x03, 0xd8, 0xde, 0xdf, 0x1a,
//  348     0xd8, 0xf1, 0xa2, 0xfa, 0xf9, 0xa8, 0x84, 0x98, 0xd9, 0xc7, 0xdf, 0xf8, 0xf8, 0xf8, 0x83, 0xc7,
//  349     0xda, 0xdf, 0x69, 0xdf, 0xf8, 0x83, 0xc3, 0xd8, 0xf4, 0x01, 0x14, 0xf1, 0x98, 0xa8, 0x82, 0x2e,
//  350     0xa8, 0x84, 0xf3, 0x11, 0xd1, 0x82, 0xf5, 0xd9, 0x92, 0x50, 0x97, 0x88, 0xf1, 0x09, 0xf4, 0x1c,
//  351     0xd8, 0x84, 0xa8, 0xf3, 0xc0, 0xf8, 0xf9, 0xd1, 0xd9, 0x97, 0x82, 0xf1, 0x49, 0xf4, 0x0d, 0xd8,
//  352     0xf3, 0xf9, 0xf9, 0xd1, 0xd9, 0x82, 0xf4, 0xc4, 0x03, 0xd8, 0xde, 0xdf, 0xd8, 0xf1, 0xad, 0x88,
//  353     0x98, 0xcc, 0xa8, 0x09, 0xf9, 0xd9, 0x82, 0x92, 0xa8, 0xf5, 0x7c, 0xf1, 0x88, 0x3a, 0xcf, 0x94,
//  354     0x4a, 0x6e, 0x98, 0xdb, 0x69, 0x31, 0xda, 0xad, 0xf2, 0xde, 0xf9, 0xd8, 0x87, 0x95, 0xa8, 0xf2,
//  355     0x21, 0xd1, 0xda, 0xa5, 0xf9, 0xf4, 0x17, 0xd9, 0xf1, 0xae, 0x8e, 0xd0, 0xc0, 0xc3, 0xae, 0x82,
//  356     /* bank # 6 */
//  357     0xc6, 0x84, 0xc3, 0xa8, 0x85, 0x95, 0xc8, 0xa5, 0x88, 0xf2, 0xc0, 0xf1, 0xf4, 0x01, 0x0e, 0xf1,
//  358     0x8e, 0x9e, 0xa8, 0xc6, 0x3e, 0x56, 0xf5, 0x54, 0xf1, 0x88, 0x72, 0xf4, 0x01, 0x15, 0xf1, 0x98,
//  359     0x45, 0x85, 0x6e, 0xf5, 0x8e, 0x9e, 0x04, 0x88, 0xf1, 0x42, 0x98, 0x5a, 0x8e, 0x9e, 0x06, 0x88,
//  360     0x69, 0xf4, 0x01, 0x1c, 0xf1, 0x98, 0x1e, 0x11, 0x08, 0xd0, 0xf5, 0x04, 0xf1, 0x1e, 0x97, 0x02,
//  361     0x02, 0x98, 0x36, 0x25, 0xdb, 0xf9, 0xd9, 0x85, 0xa5, 0xf3, 0xc1, 0xda, 0x85, 0xa5, 0xf3, 0xdf,
//  362     0xd8, 0x85, 0x95, 0xa8, 0xf3, 0x09, 0xda, 0xa5, 0xfa, 0xd8, 0x82, 0x92, 0xa8, 0xf5, 0x78, 0xf1,
//  363     0x88, 0x1a, 0x84, 0x9f, 0x26, 0x88, 0x98, 0x21, 0xda, 0xf4, 0x1d, 0xf3, 0xd8, 0x87, 0x9f, 0x39,
//  364     0xd1, 0xaf, 0xd9, 0xdf, 0xdf, 0xfb, 0xf9, 0xf4, 0x0c, 0xf3, 0xd8, 0xfa, 0xd0, 0xf8, 0xda, 0xf9,
//  365     0xf9, 0xd0, 0xdf, 0xd9, 0xf9, 0xd8, 0xf4, 0x0b, 0xd8, 0xf3, 0x87, 0x9f, 0x39, 0xd1, 0xaf, 0xd9,
//  366     0xdf, 0xdf, 0xf4, 0x1d, 0xf3, 0xd8, 0xfa, 0xfc, 0xa8, 0x69, 0xf9, 0xf9, 0xaf, 0xd0, 0xda, 0xde,
//  367     0xfa, 0xd9, 0xf8, 0x8f, 0x9f, 0xa8, 0xf1, 0xcc, 0xf3, 0x98, 0xdb, 0x45, 0xd9, 0xaf, 0xdf, 0xd0,
//  368     0xf8, 0xd8, 0xf1, 0x8f, 0x9f, 0xa8, 0xca, 0xf3, 0x88, 0x09, 0xda, 0xaf, 0x8f, 0xcb, 0xf8, 0xd8,
//  369     0xf2, 0xad, 0x97, 0x8d, 0x0c, 0xd9, 0xa5, 0xdf, 0xf9, 0xba, 0xa6, 0xf3, 0xfa, 0xf4, 0x12, 0xf2,
//  370     0xd8, 0x95, 0x0d, 0xd1, 0xd9, 0xba, 0xa6, 0xf3, 0xfa, 0xda, 0xa5, 0xf2, 0xc1, 0xba, 0xa6, 0xf3,
//  371     0xdf, 0xd8, 0xf1, 0xba, 0xb2, 0xb6, 0x86, 0x96, 0xa6, 0xd0, 0xca, 0xf3, 0x49, 0xda, 0xa6, 0xcb,
//  372     0xf8, 0xd8, 0xb0, 0xb4, 0xb8, 0xd8, 0xad, 0x84, 0xf2, 0xc0, 0xdf, 0xf1, 0x8f, 0xcb, 0xc3, 0xa8,
//  373     /* bank # 7 */
//  374     0xb2, 0xb6, 0x86, 0x96, 0xc8, 0xc1, 0xcb, 0xc3, 0xf3, 0xb0, 0xb4, 0x88, 0x98, 0xa8, 0x21, 0xdb,
//  375     0x71, 0x8d, 0x9d, 0x71, 0x85, 0x95, 0x21, 0xd9, 0xad, 0xf2, 0xfa, 0xd8, 0x85, 0x97, 0xa8, 0x28,
//  376     0xd9, 0xf4, 0x08, 0xd8, 0xf2, 0x8d, 0x29, 0xda, 0xf4, 0x05, 0xd9, 0xf2, 0x85, 0xa4, 0xc2, 0xf2,
//  377     0xd8, 0xa8, 0x8d, 0x94, 0x01, 0xd1, 0xd9, 0xf4, 0x11, 0xf2, 0xd8, 0x87, 0x21, 0xd8, 0xf4, 0x0a,
//  378     0xd8, 0xf2, 0x84, 0x98, 0xa8, 0xc8, 0x01, 0xd1, 0xd9, 0xf4, 0x11, 0xd8, 0xf3, 0xa4, 0xc8, 0xbb,
//  379     0xaf, 0xd0, 0xf2, 0xde, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xd8, 0xf1, 0xb8, 0xf6,
//  380     0xb5, 0xb9, 0xb0, 0x8a, 0x95, 0xa3, 0xde, 0x3c, 0xa3, 0xd9, 0xf8, 0xd8, 0x5c, 0xa3, 0xd9, 0xf8,
//  381     0xd8, 0x7c, 0xa3, 0xd9, 0xf8, 0xd8, 0xf8, 0xf9, 0xd1, 0xa5, 0xd9, 0xdf, 0xda, 0xfa, 0xd8, 0xb1,
//  382     0x85, 0x30, 0xf7, 0xd9, 0xde, 0xd8, 0xf8, 0x30, 0xad, 0xda, 0xde, 0xd8, 0xf2, 0xb4, 0x8c, 0x99,
//  383     0xa3, 0x2d, 0x55, 0x7d, 0xa0, 0x83, 0xdf, 0xdf, 0xdf, 0xb5, 0x91, 0xa0, 0xf6, 0x29, 0xd9, 0xfb,
//  384     0xd8, 0xa0, 0xfc, 0x29, 0xd9, 0xfa, 0xd8, 0xa0, 0xd0, 0x51, 0xd9, 0xf8, 0xd8, 0xfc, 0x51, 0xd9,
//  385     0xf9, 0xd8, 0x79, 0xd9, 0xfb, 0xd8, 0xa0, 0xd0, 0xfc, 0x79, 0xd9, 0xfa, 0xd8, 0xa1, 0xf9, 0xf9,
//  386     0xf9, 0xf9, 0xf9, 0xa0, 0xda, 0xdf, 0xdf, 0xdf, 0xd8, 0xa1, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xac,
//  387     0xde, 0xf8, 0xad, 0xde, 0x83, 0x93, 0xac, 0x2c, 0x54, 0x7c, 0xf1, 0xa8, 0xdf, 0xdf, 0xdf, 0xf6,
//  388     0x9d, 0x2c, 0xda, 0xa0, 0xdf, 0xd9, 0xfa, 0xdb, 0x2d, 0xf8, 0xd8, 0xa8, 0x50, 0xda, 0xa0, 0xd0,
//  389     0xde, 0xd9, 0xd0, 0xf8, 0xf8, 0xf8, 0xdb, 0x55, 0xf8, 0xd8, 0xa8, 0x78, 0xda, 0xa0, 0xd0, 0xdf,
//  390     /* bank # 8 */
//  391     0xd9, 0xd0, 0xfa, 0xf8, 0xf8, 0xf8, 0xf8, 0xdb, 0x7d, 0xf8, 0xd8, 0x9c, 0xa8, 0x8c, 0xf5, 0x30,
//  392     0xdb, 0x38, 0xd9, 0xd0, 0xde, 0xdf, 0xa0, 0xd0, 0xde, 0xdf, 0xd8, 0xa8, 0x48, 0xdb, 0x58, 0xd9,
//  393     0xdf, 0xd0, 0xde, 0xa0, 0xdf, 0xd0, 0xde, 0xd8, 0xa8, 0x68, 0xdb, 0x70, 0xd9, 0xdf, 0xdf, 0xa0,
//  394     0xdf, 0xdf, 0xd8, 0xf1, 0xa8, 0x88, 0x90, 0x2c, 0x54, 0x7c, 0x98, 0xa8, 0xd0, 0x5c, 0x38, 0xd1,
//  395     0xda, 0xf2, 0xae, 0x8c, 0xdf, 0xf9, 0xd8, 0xb0, 0x87, 0xa8, 0xc1, 0xc1, 0xb1, 0x88, 0xa8, 0xc6,
//  396     0xf9, 0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xa8,
//  397     0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xf7, 0x8d, 0x9d, 0xad, 0xf8, 0x18, 0xda,
//  398     0xf2, 0xae, 0xdf, 0xd8, 0xf7, 0xad, 0xfa, 0x30, 0xd9, 0xa4, 0xde, 0xf9, 0xd8, 0xf2, 0xae, 0xde,
//  399     0xfa, 0xf9, 0x83, 0xa7, 0xd9, 0xc3, 0xc5, 0xc7, 0xf1, 0x88, 0x9b, 0xa7, 0x7a, 0xad, 0xf7, 0xde,
//  400     0xdf, 0xa4, 0xf8, 0x84, 0x94, 0x08, 0xa7, 0x97, 0xf3, 0x00, 0xae, 0xf2, 0x98, 0x19, 0xa4, 0x88,
//  401     0xc6, 0xa3, 0x94, 0x88, 0xf6, 0x32, 0xdf, 0xf2, 0x83, 0x93, 0xdb, 0x09, 0xd9, 0xf2, 0xaa, 0xdf,
//  402     0xd8, 0xd8, 0xae, 0xf8, 0xf9, 0xd1, 0xda, 0xf3, 0xa4, 0xde, 0xa7, 0xf1, 0x88, 0x9b, 0x7a, 0xd8,
//  403     0xf3, 0x84, 0x94, 0xae, 0x19, 0xf9, 0xda, 0xaa, 0xf1, 0xdf, 0xd8, 0xa8, 0x81, 0xc0, 0xc3, 0xc5,
//  404     0xc7, 0xa3, 0x92, 0x83, 0xf6, 0x28, 0xad, 0xde, 0xd9, 0xf8, 0xd8, 0xa3, 0x50, 0xad, 0xd9, 0xf8,
//  405     0xd8, 0xa3, 0x78, 0xad, 0xd9, 0xf8, 0xd8, 0xf8, 0xf9, 0xd1, 0xa1, 0xda, 0xde, 0xc3, 0xc5, 0xc7,
//  406     0xd8, 0xa1, 0x81, 0x94, 0xf8, 0x18, 0xf2, 0xb0, 0x89, 0xac, 0xc3, 0xc5, 0xc7, 0xf1, 0xd8, 0xb8,
//  407     /* bank # 9 */
//  408     0xb4, 0xb0, 0x97, 0x86, 0xa8, 0x31, 0x9b, 0x06, 0x99, 0x07, 0xab, 0x97, 0x28, 0x88, 0x9b, 0xf0,
//  409     0x0c, 0x20, 0x14, 0x40, 0xb0, 0xb4, 0xb8, 0xf0, 0xa8, 0x8a, 0x9a, 0x28, 0x50, 0x78, 0xb7, 0x9b,
//  410     0xa8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69, 0x38, 0x64, 0x48, 0x31, 0xf1, 0xbb, 0xab,
//  411     0x88, 0x00, 0x2c, 0x54, 0x7c, 0xf0, 0xb3, 0x8b, 0xb8, 0xa8, 0x04, 0x28, 0x50, 0x78, 0xf1, 0xb0,
//  412     0x88, 0xb4, 0x97, 0x26, 0xa8, 0x59, 0x98, 0xbb, 0xab, 0xb3, 0x8b, 0x02, 0x26, 0x46, 0x66, 0xb0,
//  413     0xb8, 0xf0, 0x8a, 0x9c, 0xa8, 0x29, 0x51, 0x79, 0x8b, 0x29, 0x51, 0x79, 0x8a, 0x24, 0x70, 0x59,
//  414     0x8b, 0x20, 0x58, 0x71, 0x8a, 0x44, 0x69, 0x38, 0x8b, 0x39, 0x40, 0x68, 0x8a, 0x64, 0x48, 0x31,
//  415     0x8b, 0x30, 0x49, 0x60, 0x88, 0xf1, 0xac, 0x00, 0x2c, 0x54, 0x7c, 0xf0, 0x8c, 0xa8, 0x04, 0x28,
//  416     0x50, 0x78, 0xf1, 0x88, 0x97, 0x26, 0xa8, 0x59, 0x98, 0xac, 0x8c, 0x02, 0x26, 0x46, 0x66, 0xf0,
//  417     0x89, 0x9c, 0xa8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69, 0x38, 0x64, 0x48, 0x31, 0xa9,
//  418     0x88, 0x09, 0x20, 0x59, 0x70, 0xab, 0x11, 0x38, 0x40, 0x69, 0xa8, 0x19, 0x31, 0x48, 0x60, 0x8c,
//  419     0xa8, 0x3c, 0x41, 0x5c, 0x20, 0x7c, 0x00, 0xf1, 0x87, 0x98, 0x19, 0x86, 0xa8, 0x6e, 0x76, 0x7e,
//  420     0xa9, 0x99, 0x88, 0x2d, 0x55, 0x7d, 0xd8, 0xb1, 0xb5, 0xb9, 0xa3, 0xdf, 0xdf, 0xdf, 0xae, 0xd0,
//  421     0xdf, 0xaa, 0xd0, 0xde, 0xf2, 0xab, 0xf8, 0xf9, 0xd9, 0xb0, 0x87, 0xc4, 0xaa, 0xf1, 0xdf, 0xdf,
//  422     0xbb, 0xaf, 0xdf, 0xdf, 0xb9, 0xd8, 0xb1, 0xf1, 0xa3, 0x97, 0x8e, 0x60, 0xdf, 0xb0, 0x84, 0xf2,
//  423     0xc8, 0xf8, 0xf9, 0xd9, 0xde, 0xd8, 0x93, 0x85, 0xf1, 0x4a, 0xb1, 0x83, 0xa3, 0x08, 0xb5, 0x83,
//  424     /* bank # 10 */
//  425     0x9a, 0x08, 0x10, 0xb7, 0x9f, 0x10, 0xd8, 0xf1, 0xb0, 0xba, 0xae, 0xb0, 0x8a, 0xc2, 0xb2, 0xb6,
//  426     0x8e, 0x9e, 0xf1, 0xfb, 0xd9, 0xf4, 0x1d, 0xd8, 0xf9, 0xd9, 0x0c, 0xf1, 0xd8, 0xf8, 0xf8, 0xad,
//  427     0x61, 0xd9, 0xae, 0xfb, 0xd8, 0xf4, 0x0c, 0xf1, 0xd8, 0xf8, 0xf8, 0xad, 0x19, 0xd9, 0xae, 0xfb,
//  428     0xdf, 0xd8, 0xf4, 0x16, 0xf1, 0xd8, 0xf8, 0xad, 0x8d, 0x61, 0xd9, 0xf4, 0xf4, 0xac, 0xf5, 0x9c,
//  429     0x9c, 0x8d, 0xdf, 0x2b, 0xba, 0xb6, 0xae, 0xfa, 0xf8, 0xf4, 0x0b, 0xd8, 0xf1, 0xae, 0xd0, 0xf8,
//  430     0xad, 0x51, 0xda, 0xae, 0xfa, 0xf8, 0xf1, 0xd8, 0xb9, 0xb1, 0xb6, 0xa3, 0x83, 0x9c, 0x08, 0xb9,
//  431     0xb1, 0x83, 0x9a, 0xb5, 0xaa, 0xc0, 0xfd, 0x30, 0x83, 0xb7, 0x9f, 0x10, 0xb5, 0x8b, 0x93, 0xf2,
//  432     0x02, 0x02, 0xd1, 0xab, 0xda, 0xde, 0xd8, 0xf1, 0xb0, 0x80, 0xba, 0xab, 0xc0, 0xc3, 0xb2, 0x84,
//  433     0xc1, 0xc3, 0xd8, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0x09, 0xb4, 0xd9, 0xab, 0xde, 0xb0,
//  434     0x87, 0x9c, 0xb9, 0xa3, 0xdd, 0xf1, 0xb3, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0xb0, 0x87, 0xa3, 0xa3,
//  435     0xa3, 0xa3, 0xb2, 0x8b, 0xb6, 0x9b, 0xf2, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
//  436     0xa3, 0xf1, 0xb0, 0x87, 0xb5, 0x9a, 0xa3, 0xf3, 0x9b, 0xa3, 0xa3, 0xdc, 0xba, 0xac, 0xdf, 0xb9,
//  437     0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
//  438     0xd8, 0xd8, 0xd8, 0xbb, 0xb3, 0xb7, 0xf1, 0xaa, 0xf9, 0xda, 0xff, 0xd9, 0x80, 0x9a, 0xaa, 0x28,
//  439     0xb4, 0x80, 0x98, 0xa7, 0x20, 0xb7, 0x97, 0x87, 0xa8, 0x66, 0x88, 0xf0, 0x79, 0x51, 0xf1, 0x90,
//  440     0x2c, 0x87, 0x0c, 0xa7, 0x81, 0x97, 0x62, 0x93, 0xf0, 0x71, 0x71, 0x60, 0x85, 0x94, 0x01, 0x29,
//  441     /* bank # 11 */
//  442     0x51, 0x79, 0x90, 0xa5, 0xf1, 0x28, 0x4c, 0x6c, 0x87, 0x0c, 0x95, 0x18, 0x85, 0x78, 0xa3, 0x83,
//  443     0x90, 0x28, 0x4c, 0x6c, 0x88, 0x6c, 0xd8, 0xf3, 0xa2, 0x82, 0x00, 0xf2, 0x10, 0xa8, 0x92, 0x19,
//  444     0x80, 0xa2, 0xf2, 0xd9, 0x26, 0xd8, 0xf1, 0x88, 0xa8, 0x4d, 0xd9, 0x48, 0xd8, 0x96, 0xa8, 0x39,
//  445     0x80, 0xd9, 0x3c, 0xd8, 0x95, 0x80, 0xa8, 0x39, 0xa6, 0x86, 0x98, 0xd9, 0x2c, 0xda, 0x87, 0xa7,
//  446     0x2c, 0xd8, 0xa8, 0x89, 0x95, 0x19, 0xa9, 0x80, 0xd9, 0x38, 0xd8, 0xa8, 0x89, 0x39, 0xa9, 0x80,
//  447     0xda, 0x3c, 0xd8, 0xa8, 0x2e, 0xa8, 0x39, 0x90, 0xd9, 0x0c, 0xd8, 0xa8, 0x95, 0x31, 0x98, 0xd9,
//  448     0x0c, 0xd8, 0xa8, 0x09, 0xd9, 0xff, 0xd8, 0x01, 0xda, 0xff, 0xd8, 0x95, 0x39, 0xa9, 0xda, 0x26,
//  449     0xff, 0xd8, 0x90, 0xa8, 0x0d, 0x89, 0x99, 0xa8, 0x10, 0x80, 0x98, 0x21, 0xda, 0x2e, 0xd8, 0x89,
//  450     0x99, 0xa8, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8, 0x86, 0x96, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8,
//  451     0x87, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8, 0x82, 0x92, 0xf3, 0x41, 0x80, 0xf1, 0xd9, 0x2e, 0xd8,
//  452     0xa8, 0x82, 0xf3, 0x19, 0x80, 0xf1, 0xd9, 0x2e, 0xd8, 0x82, 0xac, 0xf3, 0xc0, 0xa2, 0x80, 0x22,
//  453     0xf1, 0xa6, 0x2e, 0xa7, 0x2e, 0xa9, 0x22, 0x98, 0xa8, 0x29, 0xda, 0xac, 0xde, 0xff, 0xd8, 0xa2,
//  454     0xf2, 0x2a, 0xf1, 0xa9, 0x2e, 0x82, 0x92, 0xa8, 0xf2, 0x31, 0x80, 0xa6, 0x96, 0xf1, 0xd9, 0x00,
//  455     0xac, 0x8c, 0x9c, 0x0c, 0x30, 0xac, 0xde, 0xd0, 0xde, 0xff, 0xd8, 0x8c, 0x9c, 0xac, 0xd0, 0x10,
//  456     0xac, 0xde, 0x80, 0x92, 0xa2, 0xf2, 0x4c, 0x82, 0xa8, 0xf1, 0xca, 0xf2, 0x35, 0xf1, 0x96, 0x88,
//  457     0xa6, 0xd9, 0x00, 0xd8, 0xf1, 0xff
//  458 };
//  459 
//  460 static const unsigned short sStartAddress = 0x0400;
//  461 
//  462 /* END OF SECTION COPIED FROM dmpDefaultMPU6050.c */
//  463 
//  464 #define INT_SRC_TAP             (0x01)
//  465 #define INT_SRC_ANDROID_ORIENT  (0x08)
//  466 
//  467 #define DMP_FEATURE_SEND_ANY_GYRO   (DMP_FEATURE_SEND_RAW_GYRO | \ 
//  468                                      DMP_FEATURE_SEND_CAL_GYRO)
//  469 
//  470 #define MAX_PACKET_LENGTH   (32)
//  471 
//  472 #define DMP_SAMPLE_RATE     (200)
//  473 #define GYRO_SF             (46850825LL * 200 / DMP_SAMPLE_RATE)
//  474 
//  475 #define FIFO_CORRUPTION_CHECK
//  476 #ifdef FIFO_CORRUPTION_CHECK
//  477 #define QUAT_ERROR_THRESH       (1L<<24)
//  478 #define QUAT_MAG_SQ_NORMALIZED  (1L<<28)
//  479 #define QUAT_MAG_SQ_MIN         (QUAT_MAG_SQ_NORMALIZED - QUAT_ERROR_THRESH)
//  480 #define QUAT_MAG_SQ_MAX         (QUAT_MAG_SQ_NORMALIZED + QUAT_ERROR_THRESH)
//  481 #endif
//  482 
//  483 struct dmp_s {
//  484     void (*tap_cb)(unsigned char count, unsigned char direction);
//  485     void (*android_orient_cb)(unsigned char orientation);
//  486     unsigned short orient;
//  487     unsigned short feature_mask;
//  488     unsigned short fifo_rate;
//  489     unsigned char packet_length;
//  490 };
//  491 
//  492 //static struct dmp_s dmp = {
//  493 //    .tap_cb = NULL,
//  494 //    .android_orient_cb = NULL,
//  495 //    .orient = 0,
//  496 //    .feature_mask = 0,
//  497 //    .fifo_rate = 0,
//  498 //    .packet_length = 0
//  499 //};
//  500 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  501 static struct dmp_s dmp={
dmp:
        DS 11
        REQUIRE __INIT_XDATA_Z
//  502   NULL,
//  503   NULL,
//  504   0,
//  505   0,
//  506   0,
//  507   0
//  508 };
//  509 
//  510 /**
//  511  *  @brief  Load the DMP with this image.
//  512  *  @return 0 if successful.
//  513  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  514 int dmp_load_motion_driver_firmware(void)
dmp_load_motion_driver_firmware:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function dmp_load_motion_driver_firmware
        CODE
//  515 {
        FUNCALL dmp_load_motion_driver_firmware, mpu_load_firmware
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  516     return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
//  517         DMP_SAMPLE_RATE);
        ; Setup parameters for call to function mpu_load_firmware
        MOV     ?V0 + 0,#-0x38
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#dmp_memory & 0xff
        MOV     R5,#(dmp_memory >> 8) & 0xff
        MOV     R2,#-0xa
        MOV     R3,#0xb
        LCALL   ??mpu_load_firmware?relay
        LJMP    ??Subroutine45_0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  518 }
//  519 
//  520 /**
//  521  *  @brief      Push gyro and accel orientation to the DMP.
//  522  *  The orientation is represented here as the output of
//  523  *  @e inv_orientation_matrix_to_scalar.
//  524  *  @param[in]  orient  Gyro and accel orientation in body frame.
//  525  *  @return     0 if successful.
//  526  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  527 int dmp_set_orientation(unsigned short orient)
dmp_set_orientation:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function dmp_set_orientation
        CODE
//  528 {
        FUNCALL dmp_set_orientation, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_orientation, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_orientation, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_orientation, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_orientation, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_orientation, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  529     unsigned char gyro_regs[3], accel_regs[3];
//  530     const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {76, 205, 108}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {76, 205, 108}>` & 0xff
        MOV     A,#0x3
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  531     const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {12, 201, 44}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {12, 201, 44}>` & 0xff
        MOV     A,#0x3
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  532     const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {54, 86, 118}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {54, 86, 118}>` & 0xff
        MOV     A,#0x3
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  533     const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {38, 70, 102}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {38, 70, 102}>` & 0xff
        MOV     A,#0x3
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     A,R6
        ANL     A,#0x3
        MOV     R2,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_71:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  534 
//  535     gyro_regs[0] = gyro_axes[orient & 3];
//  536     gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
        MOV     A,R6
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        ANL     A,#0x3
        MOV     R0,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_67:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  537     gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
        MOV     A,R6
        SWAP    A
        RRC     A
        RRC     A
        ANL     A,#0x3
        MOV     R4,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R4
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_68:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  538     accel_regs[0] = accel_axes[orient & 3];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  539     accel_regs[1] = accel_axes[(orient >> 3) & 3];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_69:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  540     accel_regs[2] = accel_axes[(orient >> 6) & 3];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R4
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_70:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  541 
//  542     /* Chip-to-body, axes only. */
//  543     if (mpu_write_mem(FCFG_1, 3, gyro_regs))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#0x26
        MOV     R3,#0x4
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_110:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??dmp_set_orientation_0
//  544         return -1;
??dmp_set_orientation_1:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LJMP    ??CrossCallReturnLabel_53 & 0xFFFF
//  545     if (mpu_write_mem(FCFG_2, 3, accel_regs))
??dmp_set_orientation_0:
        ; Setup parameters for call to function mpu_write_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#0x2a
        MOV     R3,#0x4
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_111:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??dmp_set_orientation_1
//  546         return -1;
//  547 
//  548     memcpy(gyro_regs, gyro_sign, 3);
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  549     memcpy(accel_regs, accel_sign, 3);
        ; Setup parameters for call to function memcpy
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  550     if (orient & 4) {
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??CrossCallReturnLabel_33
//  551         gyro_regs[0] |= 1;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  552         accel_regs[0] |= 1;
??CrossCallReturnLabel_32:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine24 & 0xFFFF
//  553     }
//  554     if (orient & 0x20) {
??CrossCallReturnLabel_33:
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??CrossCallReturnLabel_35
//  555         gyro_regs[1] |= 1;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  556         accel_regs[1] |= 1;
??CrossCallReturnLabel_34:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  557     }
//  558     if (orient & 0x100) {
??CrossCallReturnLabel_35:
        MOV     A,R7
        ANL     A,#0x1
        JZ      ??CrossCallReturnLabel_37
//  559         gyro_regs[2] |= 1;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  560         accel_regs[2] |= 1;
??CrossCallReturnLabel_36:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  561     }
//  562 
//  563     /* Chip-to-body, sign only. */
//  564     if (mpu_write_mem(FCFG_3, 3, gyro_regs))
??CrossCallReturnLabel_37:
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#0x40
        MOV     R3,#0x4
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_112:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_orientation_1 & 0xFFFF
//  565         return -1;
//  566     if (mpu_write_mem(FCFG_7, 3, accel_regs))
        ; Setup parameters for call to function mpu_write_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#0x31
        MOV     R3,#0x4
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_113:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_orientation_1 & 0xFFFF
//  567         return -1;
//  568     dmp.orient = orient;
        MOV     DPTR,#dmp + 4
        LCALL   ?Subroutine32 & 0xFFFF
//  569     return 0;
??CrossCallReturnLabel_53:
        MOV     A,#0x12
        LJMP    ??Subroutine46_0 & 0xFFFF
        CFI EndBlock cfiBlock1
//  570 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_71
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOV     A,DPL
        ADD     A,R2
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_67
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
//  571 
//  572 /**
//  573  *  @brief      Push gyro biases to the DMP.
//  574  *  Because the gyro integration is handled in the DMP, any gyro biases
//  575  *  calculated by the MPL should be pushed down to DMP memory to remove
//  576  *  3-axis quaternion drift.
//  577  *  \n NOTE: If the DMP-based gyro calibration is enabled, the DMP will
//  578  *  overwrite the biases written to this location once a new one is computed.
//  579  *  @param[in]  bias    Gyro biases in q16.
//  580  *  @return     0 if successful.
//  581  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  582 int dmp_set_gyro_bias(long *bias)
dmp_set_gyro_bias:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function dmp_set_gyro_bias
        CODE
//  583 {
        FUNCALL dmp_set_gyro_bias, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_gyro_bias, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_gyro_bias, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  584     long gyro_bias_body[3];
//  585     unsigned char regs[4];
//  586 
//  587     gyro_bias_body[0] = bias[dmp.orient & 3];
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?S_SHL
        MOV     A,R2
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine44_0 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL   ?XLOAD_R2345
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
//  588     if (dmp.orient & 4)
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??dmp_set_gyro_bias_0
//  589         gyro_bias_body[0] *= -1;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        LCALL   ?L_NEG
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  590     gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
??dmp_set_gyro_bias_0:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_74:
        LCALL   ?XLOAD_R2345
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
//  591     if (dmp.orient & 0x20)
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??dmp_set_gyro_bias_1
//  592         gyro_bias_body[1] *= -1;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        LCALL   ?L_NEG
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  593     gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
??dmp_set_gyro_bias_1:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_77:
        LCALL   ?XLOAD_R2345
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
//  594     if (dmp.orient & 0x100)
        MOV     A,R7
        ANL     A,#0x1
        JZ      ??dmp_set_gyro_bias_2
//  595         gyro_bias_body[2] *= -1;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        LCALL   ?L_NEG
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  596 
//  597 #ifdef EMPL_NO_64BIT
//  598     gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
//  599     gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
//  600     gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
//  601 #else
//  602     gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
??dmp_set_gyro_bias_2:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3b86e0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     A,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  603     gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3b86e0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     A,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  604     gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3b86e0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     A,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  605 #endif
//  606 
//  607     regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  608     regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  609     regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x8
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  610     regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        LCALL   ??Subroutine47_0 & 0xFFFF
//  611     if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
??CrossCallReturnLabel_83:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x30
        MOV     R3,#0x3
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_114:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??dmp_set_gyro_bias_3
//  612         return -1;
??dmp_set_gyro_bias_4:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LJMP    ??dmp_set_gyro_bias_5 & 0xFFFF
//  613 
//  614     regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
??dmp_set_gyro_bias_3:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        LCALL   ?Subroutine26 & 0xFFFF
//  615     regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
??CrossCallReturnLabel_38:
        LCALL   ?SL_SHR
        INC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine27 & 0xFFFF
//  616     regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
??CrossCallReturnLabel_41:
        LCALL   ?SS_SHR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  617     regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
//  618     if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
??CrossCallReturnLabel_79:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x2c
        MOV     R3,#0x3
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_115:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??dmp_set_gyro_bias_4
//  619         return -1;
//  620 
//  621     regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        LCALL   ?Subroutine26 & 0xFFFF
//  622     regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
??CrossCallReturnLabel_39:
        LCALL   ?SL_SHR
        INC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine27 & 0xFFFF
//  623     regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
??CrossCallReturnLabel_42:
        LCALL   ?SS_SHR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  624     regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
//  625     return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
??CrossCallReturnLabel_80:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x28
        MOV     R3,#0x3
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_116:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
??dmp_set_gyro_bias_5:
        MOV     A,#0x10
        LJMP    ??Subroutine50_0 & 0xFFFF
        CFI EndBlock cfiBlock19
//  626 }
//  627 
//  628 /**
//  629  *  @brief      Push accel biases to the DMP.
//  630  *  These biases will be removed from the DMP 6-axis quaternion.
//  631  *  @param[in]  bias    Accel biases in q16.
//  632  *  @return     0 if successful.
//  633  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  634 int dmp_set_accel_bias(long *bias)
dmp_set_accel_bias:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function dmp_set_accel_bias
        CODE
//  635 {
        FUNCALL dmp_set_accel_bias, mpu_get_accel_sens
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_accel_bias, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 26
        MOV     A,#-0x1a
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  636     long accel_bias_body[3];
//  637     unsigned char regs[12];
//  638     long long accel_sf;
//  639     unsigned short accel_sens;
//  640 
//  641     mpu_get_accel_sens(&accel_sens);
        ; Setup parameters for call to function mpu_get_accel_sens
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??mpu_get_accel_sens?relay
//  642     accel_sf = (long long)accel_sens << 15;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        CLR     A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     A,#0xf
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
//  643     //__no_operation();
//  644 
//  645     accel_bias_body[0] = bias[dmp.orient & 3];
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL   ?XLOAD_R2345
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XSTORE_R2345
//  646     if (dmp.orient & 4)
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??dmp_set_accel_bias_0
//  647         accel_bias_body[0] *= -1;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        LCALL   ?L_NEG
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
//  648     accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
??dmp_set_accel_bias_0:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_76:
        LCALL   ?XLOAD_R2345
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
//  649     if (dmp.orient & 0x20)
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??dmp_set_accel_bias_1
//  650         accel_bias_body[1] *= -1;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        LCALL   ?L_NEG
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
//  651     accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
??dmp_set_accel_bias_1:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_78:
        LCALL   ?XLOAD_R2345
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
//  652     if (dmp.orient & 0x100)
        MOV     A,R7
        ANL     A,#0x1
        JZ      ??dmp_set_accel_bias_2
//  653         accel_bias_body[2] *= -1;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        LCALL   ?L_NEG
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  654 
//  655 #ifdef EMPL_NO_64BIT
//  656     accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
//  657     accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
//  658     accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
//  659 #else
//  660     accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
??dmp_set_accel_bias_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     A,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  661     accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     A,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  662     accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     A,#0x1e
        MOV     R0,#?V0 + 8
        LCALL   ?SL_SHR
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
//  663 #endif
//  664 
//  665     regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,#0x18
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
//  666     regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
??CrossCallReturnLabel_44:
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
//  667     regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
??CrossCallReturnLabel_45:
        LCALL   ?L_MOV_X
        MOV     A,#0x8
        MOV     R0,#?V0 + 4
        LCALL   ?SS_SHR
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine28 & 0xFFFF
//  668     regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
??CrossCallReturnLabel_46:
        LCALL   ?L_MOV_X
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
//  669     regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
??CrossCallReturnLabel_47:
        MOV     A,#0x18
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
//  670     regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
??CrossCallReturnLabel_48:
        MOV     A,#0x10
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
//  671     regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     A,#0x8
        MOV     R0,#?V0 + 4
        LCALL   ?SS_SHR
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
//  672     regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine30 & 0xFFFF
//  673     regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
??CrossCallReturnLabel_49:
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine30 & 0xFFFF
//  674     regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
??CrossCallReturnLabel_50:
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  675     regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
        MOV     ?V0 + 0,?V0 + 8
        MOV     ?V0 + 1,?V0 + 9
        MOV     A,#0x8
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  676     regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 8
        MOVX    @DPTR,A
//  677     return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#-0x6c
        MOV     R3,#0x2
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_117:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     A,#0x1a
        CFI EndBlock cfiBlock20
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  678 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 46)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Valid
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        MOV     ?V0 + 0,?V0 + 8
        MOV     ?V0 + 1,?V0 + 9
        MOV     ?V0 + 2,?V0 + 10
        MOV     ?V0 + 3,?V0 + 11
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOV     A,?V0 + 4
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_77
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        MOV     DPTR,#dmp + 4
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,R6
        SWAP    A
        ANL     A,#0xf
        ANL     A,#0xfc
        MOV     R0,A
        MOV     A,?V0 + 0
        ADD     A,R0
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine43_0:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        MOV     DPL,A
        MOV     A,?V0 + 1
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40
        REQUIRE ??Subroutine44_0
        ; // Fall through to label ??Subroutine44_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine44_0:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_73
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_76
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        MOV     DPTR,#dmp + 4
        MOVX    A,@DPTR
        MOV     R6,A
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        ANL     A,#0x3
        MOV     ?V0 + 2,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker53 Using cfiCommon1
        CFI (cfiPicker53) NoFunction
        CFI (cfiPicker53) Picker
        MOV     DPTR,#dmp + 4
        MOVX    A,@DPTR
        MOV     R6,A
        ANL     A,#0x3
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        RET
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiPicker53
//  679 
//  680 /**
//  681  *  @brief      Set DMP output rate.
//  682  *  Only used when DMP is on.
//  683  *  @param[in]  rate    Desired fifo rate (Hz).
//  684  *  @return     0 if successful.
//  685  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  686 int dmp_set_fifo_rate(unsigned short rate)
dmp_set_fifo_rate:
        CFI Block cfiBlock54 Using cfiCommon0
        CFI Function dmp_set_fifo_rate
        CODE
//  687 {
        FUNCALL dmp_set_fifo_rate, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_fifo_rate, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  688     const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
//  689         0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {254, 242, 171, 196, 170, 241, 223,` >> 8) & 0xff
        MOV     DPL,#`?<Constant {254, 242, 171, 196, 170, 241, 223,` & 0xff
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  690     unsigned short div;
//  691     unsigned char tmp[8];
//  692 
//  693     if (rate > DMP_SAMPLE_RATE)
        CLR     C
        MOV     A,R6
        SUBB    A,#-0x37
        MOV     A,R7
        SUBB    A,#0x0
        JC      ??dmp_set_fifo_rate_0
//  694         return -1;
??dmp_set_fifo_rate_1:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        SJMP    ??CrossCallReturnLabel_54
//  695     div = DMP_SAMPLE_RATE / rate - 1;
??dmp_set_fifo_rate_0:
        MOV     R0,#-0x38
        MOV     R1,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
//  696     tmp[0] = (unsigned char)((div >> 8) & 0xFF);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  697     tmp[1] = (unsigned char)(div & 0xFF);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        LCALL   ??Subroutine47_0 & 0xFFFF
//  698     if (mpu_write_mem(D_0_22, 2, tmp))
??CrossCallReturnLabel_84:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#0x16
        MOV     R3,#0x2
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_118:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??dmp_set_fifo_rate_1
//  699         return -1;
//  700     if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#-0x3f
        MOV     R3,#0xa
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_119:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??dmp_set_fifo_rate_1
//  701         return -1;
//  702 
//  703     dmp.fifo_rate = rate;
        MOV     DPTR,#dmp + 8
        LCALL   ?Subroutine32 & 0xFFFF
//  704     return 0;
??CrossCallReturnLabel_54:
        MOV     A,#0x14
        LJMP    ??Subroutine46_0 & 0xFFFF
        CFI EndBlock cfiBlock54
//  705 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57
//  706 
//  707 /**
//  708  *  @brief      Get DMP output rate.
//  709  *  @param[out] rate    Current fifo rate (Hz).
//  710  *  @return     0 if successful.
//  711  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  712 int dmp_get_fifo_rate(unsigned short *rate)
dmp_get_fifo_rate:
        CFI Block cfiBlock58 Using cfiCommon0
        CFI Function dmp_get_fifo_rate
        CODE
//  713 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  714     rate[0] = dmp.fifo_rate;
        MOV     DPTR,#dmp + 8
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock58
//  715     return 0;
//  716 }
//  717 
//  718 /**
//  719  *  @brief      Set tap threshold for a specific axis.
//  720  *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
//  721  *  @param[in]  thresh  Tap threshold, in mg/ms.
//  722  *  @return     0 if successful.
//  723  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  724 int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
dmp_set_tap_thresh:
        CFI Block cfiBlock59 Using cfiCommon0
        CFI Function dmp_set_tap_thresh
        CODE
//  725 {
        FUNCALL dmp_set_tap_thresh, mpu_get_accel_fsr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_tap_thresh, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_tap_thresh, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_tap_thresh, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_tap_thresh, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_tap_thresh, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_tap_thresh, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        MOV     R6,A
//  726     unsigned char tmp[4], accel_fsr;
//  727     float scaled_thresh;
//  728     unsigned short dmp_thresh, dmp_thresh_2;
//  729     if (!(axis & TAP_XYZ) || thresh > 1600)
        MOV     A,#0x7
        ANL     A,R6
        JZ      ??dmp_set_tap_thresh_0
        CLR     C
        MOV     A,R2
        SUBB    A,#0x41
        MOV     A,R3
        SUBB    A,#0x6
        JC      ??dmp_set_tap_thresh_1
//  730         return -1;
??dmp_set_tap_thresh_0:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LJMP    ??dmp_set_tap_thresh_2 & 0xFFFF
//  731 
//  732     scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
??dmp_set_tap_thresh_1:
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        CLR     A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 4
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_43480000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_DIV
//  733 
//  734     mpu_get_accel_fsr(&accel_fsr);
        ; Setup parameters for call to function mpu_get_accel_fsr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??mpu_get_accel_fsr?relay
//  735     switch (accel_fsr) {
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#-0x2
        JZ      ??dmp_set_tap_thresh_3
        ADD     A,#-0x2
        JZ      ??dmp_set_tap_thresh_4
        ADD     A,#-0x4
        JZ      ??dmp_set_tap_thresh_5
        ADD     A,#-0x8
        JZ      ??dmp_set_tap_thresh_6
        SJMP    ??dmp_set_tap_thresh_0
//  736     case 2:
//  737         dmp_thresh = (unsigned short)(scaled_thresh * 16384);
??dmp_set_tap_thresh_3:
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     DPTR,#__Constant_46800000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  738         /* dmp_thresh * 0.75 */
//  739         dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
        MOV     DPTR,#__Constant_46400000
        SJMP    ??dmp_set_tap_thresh_7
//  740         break;
//  741     case 4:
//  742         dmp_thresh = (unsigned short)(scaled_thresh * 8192);
??dmp_set_tap_thresh_4:
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     DPTR,#__Constant_46000000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  743         /* dmp_thresh * 0.75 */
//  744         dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
        MOV     DPTR,#__Constant_45c00000
        SJMP    ??dmp_set_tap_thresh_7
//  745         break;
//  746     case 8:
//  747         dmp_thresh = (unsigned short)(scaled_thresh * 4096);
??dmp_set_tap_thresh_5:
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     DPTR,#__Constant_45800000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  748         /* dmp_thresh * 0.75 */
//  749         dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
        MOV     DPTR,#__Constant_45400000
        SJMP    ??dmp_set_tap_thresh_7
//  750         break;
//  751     case 16:
//  752         dmp_thresh = (unsigned short)(scaled_thresh * 2048);
??dmp_set_tap_thresh_6:
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     DPTR,#__Constant_45000000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
//  753         /* dmp_thresh * 0.75 */
//  754         dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
        MOV     DPTR,#__Constant_44c00000
??dmp_set_tap_thresh_7:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        LCALL   ?FLT_TO_L
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
//  755         break;
//  756     default:
//  757         return -1;
//  758     }
//  759     tmp[0] = (unsigned char)(dmp_thresh >> 8);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  760     tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  761     tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R5
        MOVX    @DPTR,A
//  762     tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
//  763 
//  764     if (axis & TAP_X) {
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??dmp_set_tap_thresh_8
//  765         if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#-0x2c
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_101:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
//  766             return -1;
//  767         if (mpu_write_mem(D_1_36, 2, tmp+2))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#0x24
        LCALL   ?Subroutine33 & 0xFFFF
//  768             return -1;
//  769     }
??CrossCallReturnLabel_102:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
//  770     if (axis & TAP_Y) {
??dmp_set_tap_thresh_8:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??dmp_set_tap_thresh_9
//  771         if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#-0x28
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_103:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
//  772             return -1;
//  773         if (mpu_write_mem(D_1_40, 2, tmp+2))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#0x28
        LCALL   ?Subroutine33 & 0xFFFF
//  774             return -1;
//  775     }
??CrossCallReturnLabel_104:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
//  776     if (axis & TAP_Z) {
??dmp_set_tap_thresh_9:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.2
        JNC     ??dmp_set_tap_thresh_10
//  777         if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#-0x24
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_105:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
//  778             return -1;
//  779         if (mpu_write_mem(D_1_44, 2, tmp+2))
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#0x2c
        LCALL   ?Subroutine33 & 0xFFFF
//  780             return -1;
//  781     }
??CrossCallReturnLabel_106:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??dmp_set_tap_thresh_0 & 0xFFFF
//  782     return 0;
??dmp_set_tap_thresh_10:
        MOV     R2,#0x0
        MOV     R3,#0x0
??dmp_set_tap_thresh_2:
        MOV     A,#0x5
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock59
//  783 }
//  784 
//  785 /**
//  786  *  @brief      Set which axes will register a tap.
//  787  *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
//  788  *  @return     0 if successful.
//  789  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  790 int dmp_set_tap_axes(unsigned char axis)
dmp_set_tap_axes:
        CFI Block cfiBlock60 Using cfiCommon0
        CFI Function dmp_set_tap_axes
        CODE
//  791 {
        FUNCALL dmp_set_tap_axes, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
//  792     unsigned char tmp = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  793 
//  794     if (axis & TAP_X)
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??dmp_set_tap_axes_0
//  795         tmp |= 0x30;
        MOV     A,#0x30
        MOVX    @DPTR,A
//  796     if (axis & TAP_Y)
??dmp_set_tap_axes_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??dmp_set_tap_axes_1
//  797         tmp |= 0x0C;
        MOVX    A,@DPTR
        ORL     A,#0xc
        MOVX    @DPTR,A
//  798     if (axis & TAP_Z)
??dmp_set_tap_axes_1:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.2
        JNC     ??dmp_set_tap_axes_2
//  799         tmp |= 0x03;
        MOVX    A,@DPTR
        ORL     A,#0x3
        MOVX    @DPTR,A
//  800     return mpu_write_mem(D_1_72, 1, &tmp);
??dmp_set_tap_axes_2:
        ; Setup parameters for call to function mpu_write_mem
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x48
        CFI EndBlock cfiBlock60
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
//  801 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock61 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_107:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,#0x1
        SJMP    ??Subroutine46_0
        CFI EndBlock cfiBlock61
//  802 
//  803 /**
//  804  *  @brief      Set minimum number of taps needed for an interrupt.
//  805  *  @param[in]  min_taps    Minimum consecutive taps (1-4).
//  806  *  @return     0 if successful.
//  807  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  808 int dmp_set_tap_count(unsigned char min_taps)
dmp_set_tap_count:
        CFI Block cfiBlock62 Using cfiCommon0
        CFI Function dmp_set_tap_count
        CODE
//  809 {
        FUNCALL dmp_set_tap_count, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
//  810     unsigned char tmp;
//  811 
//  812     if (min_taps < 1)
        JNZ     ??dmp_set_tap_count_0
//  813         min_taps = 1;
        MOV     R6,#0x1
        SJMP    ??dmp_set_tap_count_1
//  814     else if (min_taps > 4)
??dmp_set_tap_count_0:
        CLR     C
        SUBB    A,#0x5
        JC      ??dmp_set_tap_count_1
//  815         min_taps = 4;
        MOV     R6,#0x4
//  816 
//  817     tmp = min_taps - 1;
??dmp_set_tap_count_1:
        MOV     A,#-0x1
        ADD     A,R6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine31 & 0xFFFF
//  818     return mpu_write_mem(D_1_79, 1, &tmp);
??CrossCallReturnLabel_51:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x4f
        SJMP    ?Subroutine4
        CFI EndBlock cfiBlock62
//  819 }
//  820 
//  821 /**
//  822  *  @brief      Set length between valid taps.
//  823  *  @param[in]  time    Milliseconds between taps.
//  824  *  @return     0 if successful.
//  825  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  826 int dmp_set_tap_time(unsigned short time)
dmp_set_tap_time:
        CFI Block cfiBlock63 Using cfiCommon0
        CFI Function dmp_set_tap_time
        CODE
//  827 {
        FUNCALL dmp_set_tap_time, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  828     unsigned short dmp_time;
//  829     unsigned char tmp[2];
//  830 
//  831     dmp_time = time / (1000 / DMP_SAMPLE_RATE);
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
//  832     tmp[0] = (unsigned char)(dmp_time >> 8);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R1
        MOVX    @DPTR,A
//  833     tmp[1] = (unsigned char)(dmp_time & 0xFF);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        LCALL   ??Subroutine47_0 & 0xFFFF
//  834     return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
??CrossCallReturnLabel_85:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#-0x22
        LJMP    ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock63
//  835 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock64 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R3,#0xa
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_120:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        ; Setup parameters for call to function mpu_reset_fifo
        ; Setup parameters for call to function mpu_reset_fifo
        LCALL   ??mpu_reset_fifo?relay
        CFI EndBlock cfiBlock64
        REQUIRE ??Subroutine45_0
        ; // Fall through to label ??Subroutine45_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine45_0:
        CFI Block cfiBlock65 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        CFI EndBlock cfiBlock65
        REQUIRE ??Subroutine46_0
        ; // Fall through to label ??Subroutine46_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine46_0:
        CFI Block cfiBlock66 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock66
//  836 
//  837 /**
//  838  *  @brief      Set max time between taps to register as a multi-tap.
//  839  *  @param[in]  time    Max milliseconds between taps.
//  840  *  @return     0 if successful.
//  841  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  842 int dmp_set_tap_time_multi(unsigned short time)
dmp_set_tap_time_multi:
        CFI Block cfiBlock67 Using cfiCommon0
        CFI Function dmp_set_tap_time_multi
        CODE
//  843 {
        FUNCALL dmp_set_tap_time_multi, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  844     unsigned short dmp_time;
//  845     unsigned char tmp[2];
//  846 
//  847     dmp_time = time / (1000 / DMP_SAMPLE_RATE);
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
//  848     tmp[0] = (unsigned char)(dmp_time >> 8);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R1
        MOVX    @DPTR,A
//  849     tmp[1] = (unsigned char)(dmp_time & 0xFF);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        LCALL   ??Subroutine47_0 & 0xFFFF
//  850     return mpu_write_mem(D_1_218, 2, tmp);
??CrossCallReturnLabel_86:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#-0x26
        LJMP    ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock67
//  851 }
//  852 
//  853 /**
//  854  *  @brief      Set shake rejection threshold.
//  855  *  If the DMP detects a gyro sample larger than @e thresh, taps are rejected.
//  856  *  @param[in]  sf      Gyro scale factor.
//  857  *  @param[in]  thresh  Gyro threshold in dps.
//  858  *  @return     0 if successful.
//  859  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  860 int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
dmp_set_shake_reject_thresh:
        CFI Block cfiBlock68 Using cfiCommon0
        CFI Function dmp_set_shake_reject_thresh
        CODE
//  861 {
        FUNCALL dmp_set_shake_reject_thresh, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  862     unsigned char tmp[4];
//  863     long thresh_scaled = sf / 1000 * thresh;
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?L_DIV_MOD
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
//  864     tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        LCALL   ?Subroutine26 & 0xFFFF
//  865     tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
??CrossCallReturnLabel_40:
        LCALL   ?SL_SHR
        INC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine27 & 0xFFFF
//  866     tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
??CrossCallReturnLabel_43:
        LCALL   ?SS_SHR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  867     tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
//  868     return mpu_write_mem(D_1_92, 4, tmp);
??CrossCallReturnLabel_81:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#0x5c
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_108:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x4
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock68
//  869 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker72 Using cfiCommon1
        CFI (cfiPicker72) NoFunction
        CFI (cfiPicker72) Picker
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     A,#0x8
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiPicker72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond73 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker76 Using cfiCommon1
        CFI (cfiPicker76) NoFunction
        CFI (cfiPicker76) Picker
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiPicker76
//  870 
//  871 /**
//  872  *  @brief      Set shake rejection time.
//  873  *  Sets the length of time that the gyro must be outside of the threshold set
//  874  *  by @e gyro_set_shake_reject_thresh before taps are rejected. A mandatory
//  875  *  60 ms is added to this parameter.
//  876  *  @param[in]  time    Time in milliseconds.
//  877  *  @return     0 if successful.
//  878  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  879 int dmp_set_shake_reject_time(unsigned short time)
dmp_set_shake_reject_time:
        CFI Block cfiBlock77 Using cfiCommon0
        CFI Function dmp_set_shake_reject_time
        CODE
//  880 {
        FUNCALL dmp_set_shake_reject_time, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  881     unsigned char tmp[2];
//  882 
//  883     time /= (1000 / DMP_SAMPLE_RATE);
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
//  884     tmp[0] = time >> 8;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R1
        MOVX    @DPTR,A
//  885     tmp[1] = time & 0xFF;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        LCALL   ??Subroutine47_0 & 0xFFFF
//  886     return mpu_write_mem(D_1_90,2,tmp);
??CrossCallReturnLabel_87:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#0x5a
        CFI EndBlock cfiBlock77
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
//  887 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiBlock78 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_109:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,#0x2
        LJMP    ??Subroutine46_0 & 0xFFFF
        CFI EndBlock cfiBlock78
//  888 
//  889 /**
//  890  *  @brief      Set shake rejection timeout.
//  891  *  Sets the length of time after a shake rejection that the gyro must stay
//  892  *  inside of the threshold before taps can be detected again. A mandatory
//  893  *  60 ms is added to this parameter.
//  894  *  @param[in]  time    Time in milliseconds.
//  895  *  @return     0 if successful.
//  896  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  897 int dmp_set_shake_reject_timeout(unsigned short time)
dmp_set_shake_reject_timeout:
        CFI Block cfiBlock79 Using cfiCommon0
        CFI Function dmp_set_shake_reject_timeout
        CODE
//  898 {
        FUNCALL dmp_set_shake_reject_timeout, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  899     unsigned char tmp[2];
//  900 
//  901     time /= (1000 / DMP_SAMPLE_RATE);
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
//  902     tmp[0] = time >> 8;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R1
        MOVX    @DPTR,A
//  903     tmp[1] = time & 0xFF;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        LCALL   ??Subroutine47_0 & 0xFFFF
//  904     return mpu_write_mem(D_1_88,2,tmp);
??CrossCallReturnLabel_88:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#0x58
        SJMP    ?Subroutine5
        CFI EndBlock cfiBlock79
//  905 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond80 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_79
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker84 Using cfiCommon1
        CFI (cfiPicker84) NoFunction
        CFI (cfiPicker84) Picker
        MOV     A,?V0 + 4
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiPicker84
        REQUIRE ??Subroutine47_0
        ; // Fall through to label ??Subroutine47_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine47_0:
        CFI Block cfiCond85 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_83
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_86
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_88
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_80
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_82
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker97 Using cfiCommon1
        CFI (cfiPicker97) NoFunction
        CFI (cfiPicker97) Picker
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_92:
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiPicker97

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond98 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_45
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_46
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_79
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_80
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_81
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_82
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_83
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_84
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_85
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_86
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_87
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_88
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_89
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_90
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker114 Using cfiCommon1
        CFI (cfiPicker114) NoFunction
        CFI (cfiPicker114) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiPicker114
//  906 
//  907 /**
//  908  *  @brief      Get current step count.
//  909  *  @param[out] count   Number of steps detected.
//  910  *  @return     0 if successful.
//  911  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  912 int dmp_get_pedometer_step_count(unsigned long *count)
dmp_get_pedometer_step_count:
        CFI Block cfiBlock115 Using cfiCommon0
        CFI Function dmp_get_pedometer_step_count
        CODE
//  913 {
        FUNCALL dmp_get_pedometer_step_count, mpu_read_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  914     unsigned char tmp[4];
//  915     if (!count)
        MOV     A,R6
        ORL     A,R7
        JNZ     ??dmp_get_pedometer_step_count_0
//  916         return -1;
??dmp_get_pedometer_step_count_1:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        SJMP    ??dmp_get_pedometer_step_count_2
//  917 
//  918     if (mpu_read_mem(D_PEDSTD_STEPCTR, 4, tmp))
??dmp_get_pedometer_step_count_0:
        ; Setup parameters for call to function mpu_read_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#0x60
        MOV     R3,#0x3
        LCALL   ??mpu_read_mem?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??dmp_get_pedometer_step_count_1
//  919         return -1;
//  920 
//  921     count[0] = ((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
//  922         ((unsigned long)tmp[2] << 8) | tmp[3];
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_95:
        LCALL   ?L_SHL
        INC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ?L_IOR
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  923     return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
??dmp_get_pedometer_step_count_2:
        SJMP    ??Subroutine49_0
        CFI EndBlock cfiBlock115
//  924 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond116 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_95
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker118 Using cfiCommon1
        CFI (cfiPicker118) NoFunction
        CFI (cfiPicker118) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiPicker118
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine48_0:
        CFI Block cfiCond119 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_94
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_96
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker122 Using cfiCommon1
        CFI (cfiPicker122) NoFunction
        CFI (cfiPicker122) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiPicker122
//  925 
//  926 /**
//  927  *  @brief      Overwrite current step count.
//  928  *  WARNING: This function writes to DMP memory and could potentially encounter
//  929  *  a race condition if called while the pedometer is enabled.
//  930  *  @param[in]  count   New step count.
//  931  *  @return     0 if successful.
//  932  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock123 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R3,#0x3
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_121:
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock123
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine49_0:
        CFI Block cfiBlock124 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        CFI EndBlock cfiBlock124
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine50_0:
        CFI Block cfiBlock125 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock125

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  933 int dmp_set_pedometer_step_count(unsigned long count)
dmp_set_pedometer_step_count:
        CFI Block cfiBlock126 Using cfiCommon0
        CFI Function dmp_set_pedometer_step_count
        CODE
//  934 {
        FUNCALL dmp_set_pedometer_step_count, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  935     unsigned char tmp[4];
//  936 
//  937     tmp[0] = (unsigned char)((count >> 24) & 0xFF);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R5
        MOVX    @DPTR,A
//  938     tmp[1] = (unsigned char)((count >> 16) & 0xFF);
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
//  939     tmp[2] = (unsigned char)((count >> 8) & 0xFF);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  940     tmp[3] = (unsigned char)(count & 0xFF);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        LCALL   ??Subroutine47_0 & 0xFFFF
//  941     return mpu_write_mem(D_PEDSTD_STEPCTR, 4, tmp);
??CrossCallReturnLabel_89:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#0x60
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock126
//  942 }
//  943 
//  944 /**
//  945  *  @brief      Get duration of walking time.
//  946  *  @param[in]  time    Walk time in milliseconds.
//  947  *  @return     0 if successful.
//  948  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  949 int dmp_get_pedometer_walk_time(unsigned long *time)
dmp_get_pedometer_walk_time:
        CFI Block cfiBlock127 Using cfiCommon0
        CFI Function dmp_get_pedometer_walk_time
        CODE
//  950 {
        FUNCALL dmp_get_pedometer_walk_time, mpu_read_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  951     unsigned char tmp[4];
//  952     if (!time)
        MOV     A,R6
        ORL     A,R7
        JNZ     ??dmp_get_pedometer_walk_time_0
//  953         return -1;
??dmp_get_pedometer_walk_time_1:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        SJMP    ??dmp_get_pedometer_walk_time_2
//  954 
//  955     if (mpu_read_mem(D_PEDSTD_TIMECTR, 4, tmp))
??dmp_get_pedometer_walk_time_0:
        ; Setup parameters for call to function mpu_read_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x3c
        MOV     R3,#0x3
        LCALL   ??mpu_read_mem?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??dmp_get_pedometer_walk_time_1
//  956         return -1;
//  957 
//  958     time[0] = (((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
//  959         ((unsigned long)tmp[2] << 8) | tmp[3]) * 20;
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL   ?L_SHL
        INC     A
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL   ?L_IOR
        MOV     DPTR,#__Constant_14
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  960     return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
??dmp_get_pedometer_walk_time_2:
        LJMP    ??Subroutine49_0 & 0xFFFF
        CFI EndBlock cfiBlock127
//  961 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond128 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond130) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker131 Using cfiCommon1
        CFI (cfiPicker131) NoFunction
        CFI (cfiPicker131) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        RET
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiPicker131

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond132 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond134) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond134) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker135 Using cfiCommon1
        CFI (cfiPicker135) NoFunction
        CFI (cfiPicker135) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 6,A
        MOV     A,#0x8
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond136 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond138 Using cfiCommon0
        CFI (cfiCond138) NoFunction
        CFI (cfiCond138) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond138) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond138) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond138) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond138) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond138) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond138) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond138) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond138) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond138) CFA_SP SP+0
        CFI (cfiCond138) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker139 Using cfiCommon1
        CFI (cfiPicker139) NoFunction
        CFI (cfiPicker139) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiCond138
        CFI EndBlock cfiPicker139
//  962 
//  963 /**
//  964  *  @brief      Overwrite current walk time.
//  965  *  WARNING: This function writes to DMP memory and could potentially encounter
//  966  *  a race condition if called while the pedometer is enabled.
//  967  *  @param[in]  time    New walk time in milliseconds.
//  968  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  969 int dmp_set_pedometer_walk_time(unsigned long time)
dmp_set_pedometer_walk_time:
        CFI Block cfiBlock140 Using cfiCommon0
        CFI Function dmp_set_pedometer_walk_time
        CODE
//  970 {
        FUNCALL dmp_set_pedometer_walk_time, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//  971     unsigned char tmp[4];
//  972 
//  973     time /= 20;
        MOV     DPTR,#__Constant_14
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
//  974 
//  975     tmp[0] = (unsigned char)((time >> 24) & 0xFF);
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        LCALL   ?Subroutine37 & 0xFFFF
//  976     tmp[1] = (unsigned char)((time >> 16) & 0xFF);
??CrossCallReturnLabel_58:
        MOV     ?V0 + 3,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  977     tmp[2] = (unsigned char)((time >> 8) & 0xFF);
        MOV     ?V0 + 1,?V0 + 5
        MOV     A,?V0 + 1
        MOV     ?V0 + 0,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  978     tmp[3] = (unsigned char)(time & 0xFF);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
//  979     return mpu_write_mem(D_PEDSTD_TIMECTR, 4, tmp);
??CrossCallReturnLabel_82:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x3c
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock140
//  980 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond141 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_39
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_40
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker145 Using cfiCommon1
        CFI (cfiPicker145) NoFunction
        CFI (cfiPicker145) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        RET
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiPicker145
//  981 
//  982 /**
//  983  *  @brief      Enable DMP features.
//  984  *  The following \#define's are used in the input mask:
//  985  *  \n DMP_FEATURE_TAP
//  986  *  \n DMP_FEATURE_ANDROID_ORIENT
//  987  *  \n DMP_FEATURE_LP_QUAT
//  988  *  \n DMP_FEATURE_6X_LP_QUAT
//  989  *  \n DMP_FEATURE_GYRO_CAL
//  990  *  \n DMP_FEATURE_SEND_RAW_ACCEL
//  991  *  \n DMP_FEATURE_SEND_RAW_GYRO
//  992  *  \n NOTE: DMP_FEATURE_LP_QUAT and DMP_FEATURE_6X_LP_QUAT are mutually
//  993  *  exclusive.
//  994  *  \n NOTE: DMP_FEATURE_SEND_RAW_GYRO and DMP_FEATURE_SEND_CAL_GYRO are also
//  995  *  mutually exclusive.
//  996  *  @param[in]  mask    Mask of features to enable.
//  997  *  @return     0 if successful.
//  998  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  999 int dmp_enable_feature(unsigned short mask)
dmp_enable_feature:
        CFI Block cfiBlock146 Using cfiCommon0
        CFI Function dmp_enable_feature
        CODE
// 1000 {
        FUNCALL dmp_enable_feature, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_enable_gyro_cal
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_enable_gyro_cal
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_tap_thresh
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_tap_axes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_tap_count
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_tap_time
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_tap_time_multi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_shake_reject_thresh
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_shake_reject_time
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_set_shake_reject_timeout
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_enable_lp_quat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_enable_lp_quat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_enable_6x_lp_quat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, dmp_enable_6x_lp_quat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_feature, mpu_reset_fifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1001     unsigned char tmp[10];
// 1002 
// 1003     /* TODO: All of these settings can probably be integrated into the default
// 1004      * DMP image.
// 1005      */
// 1006     /* Set integration scale factor. */
// 1007     tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
// 1008     tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3b
        MOVX    @DPTR,A
// 1009     tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x7a
        MOVX    @DPTR,A
// 1010     tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x20
        LCALL   ??Subroutine47_0 & 0xFFFF
// 1011     mpu_write_mem(D_0_104, 4, tmp);
??CrossCallReturnLabel_90:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#0x68
        MOV     R3,#0x0
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_122:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 1012 
// 1013     /* Send sensor data to the FIFO. */
// 1014     tmp[0] = 0xA3;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x5d
        MOVX    @DPTR,A
// 1015     if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
        MOV     A,R6
        ANL     A,#0x40
        JZ      ??dmp_enable_feature_0
// 1016         tmp[1] = 0xC0;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x40
        MOVX    @DPTR,A
// 1017         tmp[2] = 0xC8;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x38
        MOVX    @DPTR,A
// 1018         tmp[3] = 0xC2;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x3e
        SJMP    ??dmp_enable_feature_1
// 1019     } else {
// 1020         tmp[1] = 0xA3;
??dmp_enable_feature_0:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
        MOVX    @DPTR,A
// 1021         tmp[2] = 0xA3;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
        MOVX    @DPTR,A
// 1022         tmp[3] = 0xA3;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
??dmp_enable_feature_1:
        MOVX    @DPTR,A
// 1023     }
// 1024     if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_98:
        JZ      ??dmp_enable_feature_2
// 1025         tmp[4] = 0xC4;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x3c
        MOVX    @DPTR,A
// 1026         tmp[5] = 0xCC;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x34
        MOVX    @DPTR,A
// 1027         tmp[6] = 0xC6;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x3a
        SJMP    ??dmp_enable_feature_3
// 1028     } else {
// 1029         tmp[4] = 0xA3;
??dmp_enable_feature_2:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
        MOVX    @DPTR,A
// 1030         tmp[5] = 0xA3;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
        MOVX    @DPTR,A
// 1031         tmp[6] = 0xA3;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
??dmp_enable_feature_3:
        MOVX    @DPTR,A
// 1032     }
// 1033     tmp[7] = 0xA3;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
        MOVX    @DPTR,A
// 1034     tmp[8] = 0xA3;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
        MOVX    @DPTR,A
// 1035     tmp[9] = 0xA3;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5d
        MOVX    @DPTR,A
// 1036     mpu_write_mem(CFG_15,10,tmp);
        ; Setup parameters for call to function mpu_write_mem
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R2,#-0x59
        MOV     R3,#0xa
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_123:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 1037 
// 1038     /* Send gesture data to the FIFO. */
// 1039     if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
        MOV     A,R6
        ANL     A,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JZ      ??dmp_enable_feature_4
// 1040         tmp[0] = DINA20;
        MOV     A,#0x20
        SJMP    ??dmp_enable_feature_5
// 1041     else
// 1042         tmp[0] = 0xD8;
??dmp_enable_feature_4:
        MOV     A,#-0x28
??dmp_enable_feature_5:
        MOVX    @DPTR,A
// 1043     mpu_write_mem(CFG_27,1,tmp);
        ; Setup parameters for call to function mpu_write_mem
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#-0x4a
        MOV     R3,#0xa
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_124:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 1044 
// 1045     if (mask & DMP_FEATURE_GYRO_CAL)
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??dmp_enable_feature_6
// 1046         dmp_enable_gyro_cal(1);
        ; Setup parameters for call to function dmp_enable_gyro_cal
        MOV     R1,#0x1
        SJMP    ??dmp_enable_feature_7
// 1047     else
// 1048         dmp_enable_gyro_cal(0);
??dmp_enable_feature_6:
        ; Setup parameters for call to function dmp_enable_gyro_cal
        MOV     R1,#0x0
??dmp_enable_feature_7:
        LCALL   ??dmp_enable_gyro_cal?relay
// 1049 
// 1050     if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_99:
        JZ      ??dmp_enable_feature_8
// 1051         if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JZ      ??dmp_enable_feature_9
// 1052             tmp[0] = 0xB2;
        MOV     A,#-0x4e
        MOVX    @DPTR,A
// 1053             tmp[1] = 0x8B;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x75
        MOVX    @DPTR,A
// 1054             tmp[2] = 0xB6;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x4a
        MOVX    @DPTR,A
// 1055             tmp[3] = 0x9B;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x65
        SJMP    ??dmp_enable_feature_10
// 1056         } else {
// 1057             tmp[0] = DINAC0;
??dmp_enable_feature_9:
        MOV     A,#-0x50
        MOVX    @DPTR,A
// 1058             tmp[1] = DINA80;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
// 1059             tmp[2] = DINAC2;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x4c
        MOVX    @DPTR,A
// 1060             tmp[3] = DINA90;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x70
??dmp_enable_feature_10:
        MOVX    @DPTR,A
// 1061         }
// 1062         mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
        ; Setup parameters for call to function mpu_write_mem
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x5e
        MOV     R3,#0xa
        LCALL   ??Subroutine52_0 & 0xFFFF
// 1063     }
??CrossCallReturnLabel_125:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 1064 
// 1065     if (mask & DMP_FEATURE_TAP) {
??dmp_enable_feature_8:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNC     ??dmp_enable_feature_11
// 1066         /* Enable tap. */
// 1067         tmp[0] = 0xF8;
        MOV     A,#-0x8
        MOVX    @DPTR,A
// 1068         mpu_write_mem(CFG_20, 1, tmp);
        ; Setup parameters for call to function mpu_write_mem
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#-0x50
        MOV     R3,#0x8
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_126:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 1069         dmp_set_tap_thresh(TAP_XYZ, 250);
        ; Setup parameters for call to function dmp_set_tap_thresh
        MOV     R2,#-0x6
        MOV     R3,#0x0
        MOV     R1,#0x7
        LCALL   ??dmp_set_tap_thresh?relay
// 1070         dmp_set_tap_axes(TAP_XYZ);
        ; Setup parameters for call to function dmp_set_tap_axes
        MOV     R1,#0x7
        LCALL   ??dmp_set_tap_axes?relay
// 1071         dmp_set_tap_count(1);
        ; Setup parameters for call to function dmp_set_tap_count
        MOV     R1,#0x1
        LCALL   ??dmp_set_tap_count?relay
// 1072         dmp_set_tap_time(100);
        ; Setup parameters for call to function dmp_set_tap_time
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??dmp_set_tap_time?relay
// 1073         dmp_set_tap_time_multi(500);
        ; Setup parameters for call to function dmp_set_tap_time_multi
        MOV     R2,#-0xc
        MOV     R3,#0x1
        LCALL   ??dmp_set_tap_time_multi?relay
// 1074 
// 1075         dmp_set_shake_reject_thresh(GYRO_SF, 200);
        ; Setup parameters for call to function dmp_set_shake_reject_thresh
        MOV     ?V0 + 0,#-0x38
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     DPTR,#__Constant_3b86e0
        LCALL   ?XLOAD_R2345
        LCALL   ??dmp_set_shake_reject_thresh?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 1076         dmp_set_shake_reject_time(40);
        ; Setup parameters for call to function dmp_set_shake_reject_time
        MOV     R2,#0x28
        MOV     R3,#0x0
        LCALL   ??dmp_set_shake_reject_time?relay
// 1077         dmp_set_shake_reject_timeout(10);
        ; Setup parameters for call to function dmp_set_shake_reject_timeout
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??dmp_set_shake_reject_timeout?relay
        SJMP    ??dmp_enable_feature_12
// 1078     } else {
// 1079         tmp[0] = 0xD8;
??dmp_enable_feature_11:
        MOV     A,#-0x28
        MOVX    @DPTR,A
// 1080         mpu_write_mem(CFG_20, 1, tmp);
        ; Setup parameters for call to function mpu_write_mem
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#-0x50
        MOV     R3,#0x8
        LCALL   ??Subroutine52_0 & 0xFFFF
// 1081     }
??CrossCallReturnLabel_127:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 1082 
// 1083     if (mask & DMP_FEATURE_ANDROID_ORIENT) {
??dmp_enable_feature_12:
        MOV     A,R6
        ANL     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JZ      ??dmp_enable_feature_13
// 1084         tmp[0] = 0xD9;
        MOV     A,#-0x27
        SJMP    ??dmp_enable_feature_14
// 1085     } else
// 1086         tmp[0] = 0xD8;
??dmp_enable_feature_13:
        MOV     A,#-0x28
??dmp_enable_feature_14:
        LCALL   ?Subroutine31 & 0xFFFF
// 1087     mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
??CrossCallReturnLabel_52:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x3d
        MOV     R3,#0x7
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_128:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
// 1088 
// 1089     if (mask & DMP_FEATURE_LP_QUAT)
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??dmp_enable_feature_15
// 1090         dmp_enable_lp_quat(1);
        ; Setup parameters for call to function dmp_enable_lp_quat
        MOV     R1,#0x1
        SJMP    ??dmp_enable_feature_16
// 1091     else
// 1092         dmp_enable_lp_quat(0);
??dmp_enable_feature_15:
        ; Setup parameters for call to function dmp_enable_lp_quat
        MOV     R1,#0x0
??dmp_enable_feature_16:
        LCALL   ??dmp_enable_lp_quat?relay
// 1093 
// 1094     if (mask & DMP_FEATURE_6X_LP_QUAT)
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??dmp_enable_feature_17
// 1095         dmp_enable_6x_lp_quat(1);
        ; Setup parameters for call to function dmp_enable_6x_lp_quat
        MOV     R1,#0x1
        SJMP    ??dmp_enable_feature_18
// 1096     else
// 1097         dmp_enable_6x_lp_quat(0);
??dmp_enable_feature_17:
        ; Setup parameters for call to function dmp_enable_6x_lp_quat
        MOV     R1,#0x0
??dmp_enable_feature_18:
        LCALL   ??dmp_enable_6x_lp_quat?relay
// 1098 
// 1099     /* Pedometer is always enabled. */
// 1100     dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
        MOV     A,R6
        ORL     A,#0x8
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     DPTR,#dmp + 6
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1101     mpu_reset_fifo();
        ; Setup parameters for call to function mpu_reset_fifo
        LCALL   ??mpu_reset_fifo?relay
// 1102 
// 1103     dmp.packet_length = 0;
        MOV     DPTR,#dmp + 10
        CLR     A
        MOVX    @DPTR,A
// 1104     if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
        MOV     A,R6
        ANL     A,#0x40
        JZ      ??dmp_enable_feature_19
// 1105         dmp.packet_length += 6;
        MOV     A,#0x6
        MOVX    @DPTR,A
// 1106     if (mask & DMP_FEATURE_SEND_ANY_GYRO)
??dmp_enable_feature_19:
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_100:
        JZ      ??dmp_enable_feature_20
// 1107         dmp.packet_length += 6;
        MOVX    A,@DPTR
        ADD     A,#0x6
        MOVX    @DPTR,A
// 1108     if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
??dmp_enable_feature_20:
        MOV     A,R6
        ANL     A,#0x14
        JZ      ??dmp_enable_feature_21
// 1109         dmp.packet_length += 16;
        MOVX    A,@DPTR
        ADD     A,#0x10
        MOVX    @DPTR,A
// 1110     if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
??dmp_enable_feature_21:
        MOV     A,R6
        ANL     A,#0x3
        JZ      ??dmp_enable_feature_22
// 1111         dmp.packet_length += 4;
        MOVX    A,@DPTR
        ADD     A,#0x4
        MOVX    @DPTR,A
// 1112 
// 1113     return 0;
??dmp_enable_feature_22:
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     A,#0xa
        LJMP    ??Subroutine46_0 & 0xFFFF
        CFI EndBlock cfiBlock146
// 1114 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond147 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_98
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_99
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+0
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_100
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker150 Using cfiCommon1
        CFI (cfiPicker150) NoFunction
        CFI (cfiPicker150) Picker
        MOV     A,R6
        ANL     A,#0x80
        MOV     R0,A
        MOV     A,R7
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiPicker150
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine51_0:
        CFI Block cfiCond151 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_97
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond152 Using cfiCommon0
        CFI (cfiCond152) NoFunction
        CFI (cfiCond152) Conditional ??CrossCallReturnLabel_98
        CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond152) CFA_SP SP+0
        CFI (cfiCond152) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_99
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_100
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker155 Using cfiCommon1
        CFI (cfiPicker155) NoFunction
        CFI (cfiPicker155) Picker
        ANL     A,#0x1
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond151
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiPicker155

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond156 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_101
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond159) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond159) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond159) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond159) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond159) CFA_SP SP+0
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond160) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond160) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond161 Using cfiCommon0
        CFI (cfiCond161) NoFunction
        CFI (cfiCond161) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond161) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond161) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond161) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond161) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond161) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond161) CFA_SP SP+0
        CFI (cfiCond161) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond162 Using cfiCommon0
        CFI (cfiCond162) NoFunction
        CFI (cfiCond162) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond162) CFA_SP SP+0
        CFI (cfiCond162) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_108
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond164) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond166) CFA_SP SP+0
        CFI (cfiCond166) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond167) CFA_SP SP+0
        CFI (cfiCond167) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker169 Using cfiCommon1
        CFI (cfiPicker169) NoFunction
        CFI (cfiPicker169) Picker
        MOV     R3,#0x1
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiCond161
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiPicker169
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine52_0:
        CFI Block cfiCond170 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_110
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_111
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+0
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_112
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_113
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_114
        CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond174) CFA_SP SP+0
        CFI (cfiCond174) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_116
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_117
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond177) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 48)
        CFI Block cfiCond178 Using cfiCommon0
        CFI (cfiCond178) NoFunction
        CFI (cfiCond178) Conditional ??CrossCallReturnLabel_118
        CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond178) CFA_SP SP+0
        CFI (cfiCond178) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_119
        CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond179) CFA_SP SP+0
        CFI (cfiCond179) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_120
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_120
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_122
        CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond184) CFA_SP SP+0
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_123
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_124
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+0
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_125
        CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond187) CFA_SP SP+0
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond188 Using cfiCommon0
        CFI (cfiCond188) NoFunction
        CFI (cfiCond188) Conditional ??CrossCallReturnLabel_126
        CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond188) CFA_SP SP+0
        CFI (cfiCond188) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond189 Using cfiCommon0
        CFI (cfiCond189) NoFunction
        CFI (cfiCond189) Conditional ??CrossCallReturnLabel_127
        CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond189) CFA_SP SP+0
        CFI (cfiCond189) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_128
        CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond190) CFA_SP SP+0
        CFI (cfiCond190) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond191 Using cfiCommon0
        CFI (cfiCond191) NoFunction
        CFI (cfiCond191) Conditional ??CrossCallReturnLabel_129
        CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond191) CFA_SP SP+0
        CFI (cfiCond191) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond192 Using cfiCommon0
        CFI (cfiCond192) NoFunction
        CFI (cfiCond192) Conditional ??CrossCallReturnLabel_130
        CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond192) CFA_SP SP+0
        CFI (cfiCond192) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond193 Using cfiCommon0
        CFI (cfiCond193) NoFunction
        CFI (cfiCond193) Conditional ??CrossCallReturnLabel_101
        CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond193) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond193) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond193) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond193) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond193) CFA_SP SP+0
        CFI (cfiCond193) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_102
        CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond194) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond194) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond194) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond194) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond194) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond194) CFA_SP SP+0
        CFI (cfiCond194) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond195 Using cfiCommon0
        CFI (cfiCond195) NoFunction
        CFI (cfiCond195) Conditional ??CrossCallReturnLabel_103
        CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond195) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond195) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond195) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond195) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond195) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond195) CFA_SP SP+0
        CFI (cfiCond195) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond196 Using cfiCommon0
        CFI (cfiCond196) NoFunction
        CFI (cfiCond196) Conditional ??CrossCallReturnLabel_104
        CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond196) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond196) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond196) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond196) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond196) CFA_SP SP+0
        CFI (cfiCond196) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond197 Using cfiCommon0
        CFI (cfiCond197) NoFunction
        CFI (cfiCond197) Conditional ??CrossCallReturnLabel_105
        CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond197) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond197) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond197) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond197) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond197) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond197) CFA_SP SP+0
        CFI (cfiCond197) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_106
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond198) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond198) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond199 Using cfiCommon0
        CFI (cfiCond199) NoFunction
        CFI (cfiCond199) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond199) CFA_SP SP+0
        CFI (cfiCond199) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond200 Using cfiCommon0
        CFI (cfiCond200) NoFunction
        CFI (cfiCond200) Conditional ??CrossCallReturnLabel_107
        CFI (cfiCond200) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond200) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond200) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond200) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond200) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond200) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond200) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond200) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond200) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond200) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond200) CFA_SP SP+0
        CFI (cfiCond200) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond201 Using cfiCommon0
        CFI (cfiCond201) NoFunction
        CFI (cfiCond201) Conditional ??CrossCallReturnLabel_108
        CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond201) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond201) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond201) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond201) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond201) CFA_SP SP+0
        CFI (cfiCond201) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond202 Using cfiCommon0
        CFI (cfiCond202) NoFunction
        CFI (cfiCond202) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond202) CFA_SP SP+0
        CFI (cfiCond202) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond203 Using cfiCommon0
        CFI (cfiCond203) NoFunction
        CFI (cfiCond203) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond203) CFA_SP SP+0
        CFI (cfiCond203) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond204 Using cfiCommon0
        CFI (cfiCond204) NoFunction
        CFI (cfiCond204) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond204) CFA_SP SP+0
        CFI (cfiCond204) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond205 Using cfiCommon0
        CFI (cfiCond205) NoFunction
        CFI (cfiCond205) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond205) CFA_SP SP+0
        CFI (cfiCond205) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker206 Using cfiCommon1
        CFI (cfiPicker206) NoFunction
        CFI (cfiPicker206) Picker
        LCALL   ??mpu_write_mem?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiCond178
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiCond188
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190
        CFI EndBlock cfiCond191
        CFI EndBlock cfiCond192
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiCond195
        CFI EndBlock cfiCond196
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiCond199
        CFI EndBlock cfiCond200
        CFI EndBlock cfiCond201
        CFI EndBlock cfiCond202
        CFI EndBlock cfiCond203
        CFI EndBlock cfiCond204
        CFI EndBlock cfiCond205
        CFI EndBlock cfiPicker206

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond207 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond208 Using cfiCommon0
        CFI (cfiCond208) NoFunction
        CFI (cfiCond208) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond208) CFA_SP SP+0
        CFI (cfiCond208) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker209 Using cfiCommon1
        CFI (cfiPicker209) NoFunction
        CFI (cfiPicker209) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function mpu_write_mem
        ; Setup parameters for call to function mpu_write_mem
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond207
        CFI EndBlock cfiCond208
        CFI EndBlock cfiPicker209
// 1115 
// 1116 /**
// 1117  *  @brief      Get list of currently enabled DMP features.
// 1118  *  @param[out] Mask of enabled features.
// 1119  *  @return     0 if successful.
// 1120  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1121 int dmp_get_enabled_features(unsigned short *mask)
dmp_get_enabled_features:
        CFI Block cfiBlock210 Using cfiCommon0
        CFI Function dmp_get_enabled_features
        CODE
// 1122 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1123     mask[0] = dmp.feature_mask;
        MOV     DPTR,#dmp + 6
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock210
// 1124     return 0;
// 1125 }
// 1126 
// 1127 /**
// 1128  *  @brief      Calibrate the gyro data in the DMP.
// 1129  *  After eight seconds of no motion, the DMP will compute gyro biases and
// 1130  *  subtract them from the quaternion output. If @e dmp_enable_feature is
// 1131  *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
// 1132  *  subtracted from the gyro output.
// 1133  *  @param[in]  enable  1 to enable gyro calibration.
// 1134  *  @return     0 if successful.
// 1135  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1136 int dmp_enable_gyro_cal(unsigned char enable)
dmp_enable_gyro_cal:
        CFI Block cfiBlock211 Using cfiCommon0
        CFI Function dmp_enable_gyro_cal
        CODE
// 1137 {
        FUNCALL dmp_enable_gyro_cal, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_gyro_cal, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
// 1138     if (enable) {
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        JZ      ??dmp_enable_gyro_cal_0
// 1139         unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
        MOV     DPH,#(`?<Constant {184, 170, 179, 141, 180, 152, 13, ` >> 8) & 0xff
        MOV     DPL,#`?<Constant {184, 170, 179, 141, 180, 152, 13, ` & 0xff
        SJMP    ??dmp_enable_gyro_cal_1
// 1140         return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
// 1141     } else {
// 1142         unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
??dmp_enable_gyro_cal_0:
        MOV     DPH,#(`?<Constant {184, 170, 170, 170, 176, 136, 195,` >> 8) & 0xff
        MOV     DPL,#`?<Constant {184, 170, 170, 170, 176, 136, 195,` & 0xff
??dmp_enable_gyro_cal_1:
        MOV     A,#0x9
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1143         return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
        ; Setup parameters for call to function mpu_write_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     R2,#-0x48
        MOV     R3,#0x4
        LCALL   ??Subroutine52_0 & 0xFFFF
// 1144     }
??CrossCallReturnLabel_129:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,#0x9
        LJMP    ??Subroutine46_0 & 0xFFFF
        CFI EndBlock cfiBlock211
// 1145 }
// 1146 
// 1147 /**
// 1148  *  @brief      Generate 3-axis quaternions from the DMP.
// 1149  *  In this driver, the 3-axis and 6-axis DMP quaternion features are mutually
// 1150  *  exclusive.
// 1151  *  @param[in]  enable  1 to enable 3-axis quaternion.
// 1152  *  @return     0 if successful.
// 1153  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1154 int dmp_enable_lp_quat(unsigned char enable)
dmp_enable_lp_quat:
        CFI Block cfiBlock212 Using cfiCommon0
        CFI Function dmp_enable_lp_quat
        CODE
// 1155 {
        FUNCALL dmp_enable_lp_quat, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_lp_quat, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_lp_quat, mpu_reset_fifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
// 1156     unsigned char regs[4];
// 1157     if (enable) {
        JZ      ??dmp_enable_lp_quat_0
// 1158         regs[0] = DINBC0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x40
        MOVX    @DPTR,A
// 1159         regs[1] = DINBC2;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x3e
        MOVX    @DPTR,A
// 1160         regs[2] = DINBC4;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x3c
        MOVX    @DPTR,A
// 1161         regs[3] = DINBC6;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x3a
        MOVX    @DPTR,A
        SJMP    ??dmp_enable_lp_quat_1
// 1162     }
// 1163     else
// 1164         memset(regs, 0x8B, 4);
??dmp_enable_lp_quat_0:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#-0x75
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
// 1165 
// 1166     mpu_write_mem(CFG_LP_QUAT, 4, regs);
??dmp_enable_lp_quat_1:
        ; Setup parameters for call to function mpu_write_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x68
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock212
// 1167 
// 1168     return mpu_reset_fifo();
// 1169 }
// 1170 
// 1171 /**
// 1172  *  @brief       Generate 6-axis quaternions from the DMP.
// 1173  *  In this driver, the 3-axis and 6-axis DMP quaternion features are mutually
// 1174  *  exclusive.
// 1175  *  @param[in]   enable  1 to enable 6-axis quaternion.
// 1176  *  @return      0 if successful.
// 1177  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1178 int dmp_enable_6x_lp_quat(unsigned char enable)
dmp_enable_6x_lp_quat:
        CFI Block cfiBlock213 Using cfiCommon0
        CFI Function dmp_enable_6x_lp_quat
        CODE
// 1179 {
        FUNCALL dmp_enable_6x_lp_quat, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_6x_lp_quat, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_enable_6x_lp_quat, mpu_reset_fifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
// 1180     unsigned char regs[4];
// 1181     if (enable) {
        JZ      ??dmp_enable_6x_lp_quat_0
// 1182         regs[0] = DINA20;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x20
        MOVX    @DPTR,A
// 1183         regs[1] = DINA28;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x28
        MOVX    @DPTR,A
// 1184         regs[2] = DINA30;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x30
        MOVX    @DPTR,A
// 1185         regs[3] = DINA38;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x38
        MOVX    @DPTR,A
        SJMP    ??dmp_enable_6x_lp_quat_1
// 1186     } else
// 1187         memset(regs, 0xA3, 4);
??dmp_enable_6x_lp_quat_0:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#-0x5d
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
// 1188 
// 1189     mpu_write_mem(CFG_8, 4, regs);
??dmp_enable_6x_lp_quat_1:
        ; Setup parameters for call to function mpu_write_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#-0x62
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock213
// 1190 
// 1191     return mpu_reset_fifo();
// 1192 }
// 1193 
// 1194 /**
// 1195  *  @brief      Decode the four-byte gesture data and execute any callbacks.
// 1196  *  @param[in]  gesture Gesture data from DMP packet.
// 1197  *  @return     0 if successful.
// 1198  */
// 1199 static int decode_gesture(unsigned char *gesture)
// 1200 {
// 1201     unsigned char tap, android_orient;
// 1202 
// 1203     android_orient = gesture[3] & 0xC0;
// 1204     tap = 0x3F & gesture[3];
// 1205 
// 1206     if (gesture[1] & INT_SRC_TAP) {
// 1207         unsigned char direction, count;
// 1208         direction = tap >> 3;
// 1209         count = (tap % 8) + 1;
// 1210         if (dmp.tap_cb)
// 1211             dmp.tap_cb(direction, count);
// 1212     }
// 1213 
// 1214     if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
// 1215         if (dmp.android_orient_cb)
// 1216             dmp.android_orient_cb(android_orient >> 6);
// 1217     }
// 1218 
// 1219     return 0;
// 1220 }
// 1221 
// 1222 /**
// 1223  *  @brief      Specify when a DMP interrupt should occur.
// 1224  *  A DMP interrupt can be configured to trigger on either of the two
// 1225  *  conditions below:
// 1226  *  \n a. One FIFO period has elapsed (set by @e mpu_set_sample_rate).
// 1227  *  \n b. A tap event has been detected.
// 1228  *  @param[in]  mode    DMP_INT_GESTURE or DMP_INT_CONTINUOUS.
// 1229  *  @return     0 if successful.
// 1230  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1231 int dmp_set_interrupt_mode(unsigned char mode)
dmp_set_interrupt_mode:
        CFI Block cfiBlock214 Using cfiCommon0
        CFI Function dmp_set_interrupt_mode
        CODE
// 1232 {
        FUNCALL dmp_set_interrupt_mode, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_set_interrupt_mode, mpu_write_mem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 22
        MOV     A,#-0x16
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        MOV     R6,A
// 1233     const unsigned char regs_continuous[11] =
// 1234         {0xd8, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0x09, 0xb4, 0xd9};
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {216, 177, 185, 243, 139, 163, 145,` >> 8) & 0xff
        MOV     DPL,#`?<Constant {216, 177, 185, 243, 139, 163, 145,` & 0xff
        MOV     A,#0xb
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1235     const unsigned char regs_gesture[11] =
// 1236         {0xda, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0xda, 0xb4, 0xda};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {218, 177, 185, 243, 139, 163, 145,` >> 8) & 0xff
        MOV     DPL,#`?<Constant {218, 177, 185, 243, 139, 163, 145,` & 0xff
        MOV     A,#0xb
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1237 
// 1238     switch (mode) {
        MOV     A,R6
        DEC     A
        JZ      ??dmp_set_interrupt_mode_0
        DEC     A
        JNZ     ??dmp_set_interrupt_mode_1
// 1239     case DMP_INT_CONTINUOUS:
// 1240         return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
// 1241             (unsigned char*)regs_continuous);
        ; Setup parameters for call to function mpu_write_mem
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
??dmp_set_interrupt_mode_2:
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#0xb
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0xa
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_130:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        SJMP    ??dmp_set_interrupt_mode_3
// 1242     case DMP_INT_GESTURE:
// 1243         return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
// 1244             (unsigned char*)regs_gesture);
??dmp_set_interrupt_mode_0:
        ; Setup parameters for call to function mpu_write_mem
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??dmp_set_interrupt_mode_2
// 1245     default:
// 1246         return -1;
??dmp_set_interrupt_mode_1:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
??dmp_set_interrupt_mode_3:
        MOV     A,#0x16
// 1247     }
        LJMP    ??Subroutine46_0 & 0xFFFF
        CFI EndBlock cfiBlock214
// 1248 }
// 1249 
// 1250 /**
// 1251  *  @brief      Get one packet from the FIFO.
// 1252  *  If @e sensors does not contain a particular sensor, disregard the data
// 1253  *  returned to that pointer.
// 1254  *  \n @e sensors can contain a combination of the following flags:
// 1255  *  \n INV_X_GYRO, INV_Y_GYRO, INV_Z_GYRO
// 1256  *  \n INV_XYZ_GYRO
// 1257  *  \n INV_XYZ_ACCEL
// 1258  *  \n INV_WXYZ_QUAT
// 1259  *  \n If the FIFO has no new data, @e sensors will be zero.
// 1260  *  \n If the FIFO is disabled, @e sensors will be zero and this function will
// 1261  *  return a non-zero error code.
// 1262  *  @param[out] gyro        Gyro data in hardware units.
// 1263  *  @param[out] accel       Accel data in hardware units.
// 1264  *  @param[out] quat        3-axis quaternion data in hardware units.
// 1265  *  @param[out] timestamp   Timestamp in milliseconds.
// 1266  *  @param[out] sensors     Mask of sensors read from FIFO.
// 1267  *  @param[out] more        Number of remaining packets.
// 1268  *  @return     0 if successful.
// 1269  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1270 int dmp_read_fifo(short *gyro, short *accel, long *quat,
dmp_read_fifo:
        CFI Block cfiBlock215 Using cfiCommon0
        CFI Function dmp_read_fifo
        CODE
// 1271     unsigned long *timestamp, short *sensors, unsigned char *more)
// 1272 {
        FUNCALL dmp_read_fifo, mpu_read_fifo_stream
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_read_fifo, mpu_reset_fifo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 80, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL dmp_read_fifo, mget_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 80, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 80, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 56
        MOV     A,#-0x38
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 80)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x56
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
// 1273     unsigned char fifo_data[MAX_PACKET_LENGTH];
// 1274     unsigned char ii = 0;
        MOV     R6,#0x0
// 1275 
// 1276     /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
// 1277      * cache this value and save some cycles.
// 1278      */
// 1279     sensors[0] = 0;
        MOV     A,#0x54
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
// 1280 
// 1281     /* Get a packet. */
// 1282     if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
??CrossCallReturnLabel_28:
        ; Setup parameters for call to function mpu_read_fifo_stream
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPTR,#dmp + 10
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??mpu_read_fifo_stream?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 80)
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??dmp_read_fifo_0
// 1283         return -1;
??dmp_read_fifo_1:
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LJMP    ??dmp_read_fifo_2 & 0xFFFF
// 1284 
// 1285     /* Parse DMP packet. */
// 1286     if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
??dmp_read_fifo_0:
        MOV     DPTR,#dmp + 6
        MOVX    A,@DPTR
        ANL     A,#0x14
        JNZ     $+5
        LJMP    ??dmp_read_fifo_3 & 0xFFFF
// 1287 #ifdef FIFO_CORRUPTION_CHECK
// 1288         long quat_q14[4], quat_mag_sq;
// 1289 #endif
// 1290         quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
// 1291             ((long)fifo_data[2] << 8) | fifo_data[3];
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_94:
        LCALL   ?L_SHL
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_IOR
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ?L_IOR
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R2345
        MOV     A,#0x50
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_133:
        LCALL   ?XSTORE_R2345
// 1292         quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
// 1293             ((long)fifo_data[6] << 8) | fifo_data[7];
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     A,#0x18
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0x50
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 1294         quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
// 1295             ((long)fifo_data[10] << 8) | fifo_data[11];
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        CLR     A
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     A,#0x18
        MOV     R0,#?V0 + 8
        LCALL   ?L_SHL
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0x50
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_31:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
// 1296         quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
// 1297             ((long)fifo_data[14] << 8) | fifo_data[15];
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        CLR     A
        MOV     ?V0 + 13,A
        MOV     ?V0 + 14,A
        MOV     ?V0 + 15,A
        MOV     A,#0x18
        MOV     R0,#?V0 + 12
        LCALL   ?L_SHL
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?L_IOR
        MOV     A,#0x50
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0xc
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
// 1298         ii += 16;
        MOV     R6,#0x10
// 1299 #ifdef FIFO_CORRUPTION_CHECK
// 1300         /* We can detect a corrupted FIFO by monitoring the quaternion data and
// 1301          * ensuring that the magnitude is always normalized to one. This
// 1302          * shouldn't happen in normal operation, but if an I2C error occurs,
// 1303          * the FIFO reads might become misaligned.
// 1304          *
// 1305          * Let's start by scaling down the quaternion data to avoid long long
// 1306          * math.
// 1307          */
// 1308         quat_q14[0] = quat[0] >> 16;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,R6
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     A,#0x28
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
// 1309         quat_q14[1] = quat[1] >> 16;
        MOV     A,R6
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 1310         quat_q14[2] = quat[2] >> 16;
        MOV     ?V0 + 0,?V0 + 8
        MOV     ?V0 + 1,?V0 + 9
        MOV     ?V0 + 2,?V0 + 10
        MOV     ?V0 + 3,?V0 + 11
        MOV     A,R6
        MOV     R0,#?V0 + 0
        LCALL   ?SL_SHR
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
        MOV     A,R6
        MOV     R0,#?V0 + 8
        LCALL   ?SL_SHR
        MOV     A,#0x30
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_TO_X
// 1311         quat_q14[3] = quat[3] >> 16;
        MOV     A,R6
        MOV     R0,#?V0 + 12
        LCALL   ?SL_SHR
        MOV     A,#0x34
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_TO_X
// 1312         quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
// 1313             quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
// 1314         if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
// 1315             (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
        MOV     A,#0x28
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x28
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_MUL
        MOV     ?V0 + 8,?V0 + 4
        MOV     ?V0 + 9,?V0 + 5
        MOV     ?V0 + 10,?V0 + 6
        MOV     ?V0 + 11,?V0 + 7
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_ADD
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_ADD
        MOV     ?V0 + 4,?V0 + 12
        MOV     ?V0 + 5,?V0 + 13
        MOV     ?V0 + 6,?V0 + 14
        MOV     ?V0 + 7,?V0 + 15
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 12
        LCALL   ?L_MUL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     DPTR,#__Constant_f1000000
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        MOV     DPTR,#__Constant_2000001
        MOV     R0,#?V0 + 0
        LCALL   ?UL_GE_X
        JNC     ??dmp_read_fifo_4
// 1316             /* Quaternion is outside of the acceptable threshold. */
// 1317             mpu_reset_fifo();
        ; Setup parameters for call to function mpu_reset_fifo
        LCALL   ??mpu_reset_fifo?relay
// 1318             sensors[0] = 0;
        MOV     A,#0x54
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
// 1319             return -1;
??CrossCallReturnLabel_29:
        LJMP    ??dmp_read_fifo_1 & 0xFFFF
// 1320         }
// 1321         sensors[0] |= INV_WXYZ_QUAT;
??dmp_read_fifo_4:
        MOV     A,#0x54
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
// 1322 #endif
// 1323     }
??CrossCallReturnLabel_134:
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x1
        MOVX    @DPTR,A
// 1324 
// 1325     if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
??dmp_read_fifo_3:
        MOV     DPTR,#dmp + 6
        MOVX    A,@DPTR
        ANL     A,#0x40
        JZ      ??dmp_read_fifo_5
// 1326         accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
        MOV     ?V0 + 0,R6
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
// 1327         accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
// 1328         accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
// 1329         ii += 6;
// 1330         sensors[0] |= INV_XYZ_ACCEL;
// 1331     }
??CrossCallReturnLabel_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_135:
        MOVX    A,@DPTR
        ORL     A,#0x8
        MOVX    @DPTR,A
// 1332 
// 1333     if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
??dmp_read_fifo_5:
        MOV     DPTR,#dmp + 6
        MOVX    A,@DPTR
        ANL     A,#0x80
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_97:
        JZ      ??dmp_read_fifo_6
// 1334         gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
        MOV     ?V0 + 0,R6
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
// 1335         gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
// 1336         gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
// 1337         ii += 6;
// 1338         sensors[0] |= INV_XYZ_GYRO;
// 1339     }
??CrossCallReturnLabel_1:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_136:
        MOVX    A,@DPTR
        ORL     A,#0x70
        MOVX    @DPTR,A
// 1340 
// 1341     /* Gesture data is at the end of the DMP packet. Parse it and call
// 1342      * the gesture callbacks (if registered).
// 1343      */
// 1344     if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
??dmp_read_fifo_6:
        MOV     DPTR,#dmp + 6
        MOVX    A,@DPTR
        ANL     A,#0x3
        JZ      ??dmp_read_fifo_7
// 1345         decode_gesture(fifo_data + ii);
        MOV     ?V0 + 0,R6
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#-0x40
        ANL     A,R0
        MOV     ?V0 + 0,A
        MOV     A,#0x3f
        ANL     A,R0
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??dmp_read_fifo_8
        MOV     DPTR,#dmp
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??dmp_read_fifo_8
        ; Setup parameters for indirect call
        MOV     A,#0x7
        ANL     A,R3
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,R3
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        MOV     R1,A
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_131:
        LCALL   ?CALL_IND
??dmp_read_fifo_8:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??dmp_read_fifo_7
        MOV     DPTR,#dmp + 2
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??dmp_read_fifo_7
        ; Setup parameters for indirect call
        MOV     A,?V0 + 0
        SWAP    A
        RRC     A
        RRC     A
        ANL     A,#0x3
        MOV     R1,A
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_132:
        LCALL   ?CALL_IND
// 1346 
// 1347     get_ms(timestamp);
??dmp_read_fifo_7:
        ; Setup parameters for call to function mget_ms
        MOV     A,#0x52
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??mget_ms?relay
// 1348     return 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
??dmp_read_fifo_2:
        MOV     A,#0x38
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock215
// 1349 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond216 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_133
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond217 Using cfiCommon0
        CFI (cfiCond217) NoFunction
        CFI (cfiCond217) Conditional ??CrossCallReturnLabel_134
        CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond217) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond217) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond217) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond217) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond217) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond217) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond217) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond217) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond217) CFA_SP SP+0
        CFI (cfiCond217) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond218 Using cfiCommon0
        CFI (cfiCond218) NoFunction
        CFI (cfiCond218) Conditional ??CrossCallReturnLabel_135
        CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond218) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond218) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond218) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond218) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond218) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond218) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond218) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond218) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond218) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond218) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond218) CFA_SP SP+0
        CFI (cfiCond218) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond219 Using cfiCommon0
        CFI (cfiCond219) NoFunction
        CFI (cfiCond219) Conditional ??CrossCallReturnLabel_136
        CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond219) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond219) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond219) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond219) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond219) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond219) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond219) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond219) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond219) CFA_SP SP+0
        CFI (cfiCond219) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker220 Using cfiCommon1
        CFI (cfiPicker220) NoFunction
        CFI (cfiPicker220) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        CFI EndBlock cfiCond216
        CFI EndBlock cfiCond217
        CFI EndBlock cfiCond218
        CFI EndBlock cfiCond219
        CFI EndBlock cfiPicker220
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine53_0:
        CFI Block cfiCond221 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_131
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond222 Using cfiCommon0
        CFI (cfiCond222) NoFunction
        CFI (cfiCond222) Conditional ??CrossCallReturnLabel_132
        CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond222) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond222) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond222) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond222) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond222) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond222) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond222) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond222) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond222) CFA_SP SP+0
        CFI (cfiCond222) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond223 Using cfiCommon0
        CFI (cfiCond223) NoFunction
        CFI (cfiCond223) Conditional ??CrossCallReturnLabel_133
        CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond223) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond223) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond223) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond223) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond223) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond223) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond223) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond223) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond223) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond223) CFA_SP SP+0
        CFI (cfiCond223) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond224 Using cfiCommon0
        CFI (cfiCond224) NoFunction
        CFI (cfiCond224) Conditional ??CrossCallReturnLabel_134
        CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond224) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond224) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond224) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond224) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond224) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond224) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond224) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond224) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond224) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond224) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond224) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond224) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond224) CFA_SP SP+0
        CFI (cfiCond224) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond225 Using cfiCommon0
        CFI (cfiCond225) NoFunction
        CFI (cfiCond225) Conditional ??CrossCallReturnLabel_135
        CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond225) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond225) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond225) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond225) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond225) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond225) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond225) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond225) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond225) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond225) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond225) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond225) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond225) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond225) CFA_SP SP+0
        CFI (cfiCond225) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond226 Using cfiCommon0
        CFI (cfiCond226) NoFunction
        CFI (cfiCond226) Conditional ??CrossCallReturnLabel_136
        CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond226) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond226) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond226) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond226) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond226) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond226) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond226) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond226) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond226) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond226) CFA_SP SP+0
        CFI (cfiCond226) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker227 Using cfiCommon1
        CFI (cfiPicker227) NoFunction
        CFI (cfiPicker227) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond221
        CFI EndBlock cfiCond222
        CFI EndBlock cfiCond223
        CFI EndBlock cfiCond224
        CFI EndBlock cfiCond225
        CFI EndBlock cfiCond226
        CFI EndBlock cfiPicker227

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond228 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond229 Using cfiCommon0
        CFI (cfiCond229) NoFunction
        CFI (cfiCond229) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond229) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond229) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond229) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond229) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond229) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond229) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond229) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond229) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond229) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond229) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond229) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond229) CFA_SP SP+0
        CFI (cfiCond229) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker230 Using cfiCommon1
        CFI (cfiPicker230) NoFunction
        CFI (cfiPicker230) Picker
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_62:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond228
        CFI EndBlock cfiCond229
        CFI EndBlock cfiPicker230

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond231 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond232 Using cfiCommon0
        CFI (cfiCond232) NoFunction
        CFI (cfiCond232) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond232) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond232) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond232) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond232) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond232) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond232) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond232) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond232) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond232) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond232) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond232) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond232) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond232) CFA_SP SP+0
        CFI (cfiCond232) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker233 Using cfiCommon1
        CFI (cfiPicker233) NoFunction
        CFI (cfiPicker233) Picker
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_61:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond231
        CFI EndBlock cfiCond232
        CFI EndBlock cfiPicker233

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond234 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond235 Using cfiCommon0
        CFI (cfiCond235) NoFunction
        CFI (cfiCond235) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_31
        CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond235) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond235) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond235) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond235) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond235) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond235) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond235) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond235) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond235) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond235) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond235) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond235) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond235) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond235) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond235) CFA_SP SP+0
        CFI (cfiCond235) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond236 Using cfiCommon0
        CFI (cfiCond236) NoFunction
        CFI (cfiCond236) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_28
        CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond236) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond236) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond236) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond236) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond236) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond236) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond236) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond236) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond236) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond236) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond236) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond236) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond236) CFA_SP SP+0
        CFI (cfiCond236) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond237 Using cfiCommon0
        CFI (cfiCond237) NoFunction
        CFI (cfiCond237) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_29
        CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond237) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond237) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond237) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond237) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond237) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond237) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond237) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond237) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond237) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond237) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond237) CFA_SP SP+0
        CFI (cfiCond237) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker238 Using cfiCommon1
        CFI (cfiPicker238) NoFunction
        CFI (cfiPicker238) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond234
        CFI EndBlock cfiCond235
        CFI EndBlock cfiCond236
        CFI EndBlock cfiCond237
        CFI EndBlock cfiPicker238

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond239 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond240 Using cfiCommon0
        CFI (cfiCond240) NoFunction
        CFI (cfiCond240) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond240) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond240) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond240) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond240) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond240) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond240) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond240) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond240) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond240) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond240) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond240) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond240) CFA_SP SP+0
        CFI (cfiCond240) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond241 Using cfiCommon0
        CFI (cfiCond241) NoFunction
        CFI (cfiCond241) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond241) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond241) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond241) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond241) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond241) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond241) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond241) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond241) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond241) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond241) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond241) CFA_SP SP+0
        CFI (cfiCond241) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond242) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond242) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond242) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond242) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond242) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond242) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond242) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond242) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond242) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond242) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond242) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond242) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond242) CFA_SP SP+0
        CFI (cfiCond242) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker243 Using cfiCommon1
        CFI (cfiPicker243) NoFunction
        CFI (cfiPicker243) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond239
        CFI EndBlock cfiCond240
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiPicker243

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond244 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond245 Using cfiCommon0
        CFI (cfiCond245) NoFunction
        CFI (cfiCond245) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond245) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond245) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond245) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond245) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond245) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond245) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond245) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond245) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond245) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond245) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond245) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond245) CFA_SP SP+0
        CFI (cfiCond245) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond246 Using cfiCommon0
        CFI (cfiCond246) NoFunction
        CFI (cfiCond246) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond246) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond246) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond246) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond246) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond246) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond246) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond246) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond246) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond246) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond246) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond246) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond246) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond246) CFA_SP SP+0
        CFI (cfiCond246) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker247 Using cfiCommon1
        CFI (cfiPicker247) NoFunction
        CFI (cfiPicker247) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     A,#0x8
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond244
        CFI EndBlock cfiCond245
        CFI EndBlock cfiCond246
        CFI EndBlock cfiPicker247

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond248 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond249 Using cfiCommon0
        CFI (cfiCond249) NoFunction
        CFI (cfiCond249) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond249) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond249) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond249) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond249) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond249) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond249) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond249) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond249) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond249) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond249) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond249) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond249) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond249) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond249) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond249) CFA_SP SP+0
        CFI (cfiCond249) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker250 Using cfiCommon1
        CFI (cfiPicker250) NoFunction
        CFI (cfiPicker250) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x6
        ADD     A,R6
        MOV     R6,A
        MOV     A,#0x54
        RET
        CFI EndBlock cfiCond248
        CFI EndBlock cfiCond249
        CFI EndBlock cfiPicker250

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond251 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond252 Using cfiCommon0
        CFI (cfiCond252) NoFunction
        CFI (cfiCond252) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond252) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond252) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond252) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond252) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond252) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond252) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond252) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond252) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond252) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond252) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond252) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond252) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond252) CFA_SP SP+0
        CFI (cfiCond252) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker253 Using cfiCommon1
        CFI (cfiPicker253) NoFunction
        CFI (cfiPicker253) Picker
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_60:
        MOVX    A,@DPTR
        MOV     R2,A
        RET
        CFI EndBlock cfiCond251
        CFI EndBlock cfiCond252
        CFI EndBlock cfiPicker253

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond254 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond255 Using cfiCommon0
        CFI (cfiCond255) NoFunction
        CFI (cfiCond255) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond255) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond255) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond255) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond255) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond255) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond255) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond255) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond255) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond255) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond255) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond255) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond255) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond255) CFA_SP SP+0
        CFI (cfiCond255) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker256 Using cfiCommon1
        CFI (cfiPicker256) NoFunction
        CFI (cfiPicker256) Picker
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_63:
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_56:
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_59:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        RET
        CFI EndBlock cfiCond254
        CFI EndBlock cfiCond255
        CFI EndBlock cfiPicker256

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond257 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond258 Using cfiCommon0
        CFI (cfiCond258) NoFunction
        CFI (cfiCond258) Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_9
        CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond258) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond258) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond258) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond258) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond258) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond258) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond258) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond258) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond258) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond258) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond258) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond258) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond258) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond258) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond258) CFA_SP SP+0
        CFI (cfiCond258) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond259 Using cfiCommon0
        CFI (cfiCond259) NoFunction
        CFI (cfiCond259) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_6
        CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond259) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond259) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond259) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond259) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond259) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond259) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond259) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond259) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond259) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond259) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond259) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond259) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond259) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond259) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond259) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond259) CFA_SP SP+0
        CFI (cfiCond259) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond260 Using cfiCommon0
        CFI (cfiCond260) NoFunction
        CFI (cfiCond260) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_7
        CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond260) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond260) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond260) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond260) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond260) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond260) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond260) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond260) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond260) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond260) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond260) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond260) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond260) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond260) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond260) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond260) CFA_SP SP+0
        CFI (cfiCond260) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker261 Using cfiCommon1
        CFI (cfiPicker261) NoFunction
        CFI (cfiPicker261) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R4
        RET
        CFI EndBlock cfiCond257
        CFI EndBlock cfiCond258
        CFI EndBlock cfiCond259
        CFI EndBlock cfiCond260
        CFI EndBlock cfiPicker261

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond262 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond263 Using cfiCommon0
        CFI (cfiCond263) NoFunction
        CFI (cfiCond263) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_9
        CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond263) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond263) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond263) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond263) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond263) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond263) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond263) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond263) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond263) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond263) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond263) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond263) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond263) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond263) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond263) CFA_SP SP+0
        CFI (cfiCond263) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond264 Using cfiCommon0
        CFI (cfiCond264) NoFunction
        CFI (cfiCond264) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_6
        CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond264) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond264) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond264) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond264) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond264) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond264) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond264) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond264) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond264) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond264) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond264) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond264) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond264) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond264) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond264) CFA_SP SP+0
        CFI (cfiCond264) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond265 Using cfiCommon0
        CFI (cfiCond265) NoFunction
        CFI (cfiCond265) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_7
        CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond265) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond265) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond265) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond265) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond265) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond265) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond265) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond265) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond265) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond265) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond265) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond265) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond265) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond265) CFA_SP SP+0
        CFI (cfiCond265) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker266 Using cfiCommon1
        CFI (cfiPicker266) NoFunction
        CFI (cfiPicker266) Picker
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond262
        CFI EndBlock cfiCond263
        CFI EndBlock cfiCond264
        CFI EndBlock cfiCond265
        CFI EndBlock cfiPicker266

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond267 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond268 Using cfiCommon0
        CFI (cfiCond268) NoFunction
        CFI (cfiCond268) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_9
        CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond268) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond268) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond268) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond268) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond268) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond268) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond268) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond268) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond268) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond268) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond268) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond268) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond268) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond268) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond268) CFA_SP SP+0
        CFI (cfiCond268) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond269 Using cfiCommon0
        CFI (cfiCond269) NoFunction
        CFI (cfiCond269) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_6
        CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond269) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond269) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond269) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond269) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond269) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond269) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond269) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond269) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond269) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond269) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond269) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond269) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond269) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond269) CFA_SP SP+0
        CFI (cfiCond269) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond270 Using cfiCommon0
        CFI (cfiCond270) NoFunction
        CFI (cfiCond270) Conditional ??CrossCallReturnLabel_56, ??CrossCallReturnLabel_7
        CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond270) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond270) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond270) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond270) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond270) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond270) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond270) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond270) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond270) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond270) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond270) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond270) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond270) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond270) CFA_SP SP+0
        CFI (cfiCond270) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker271 Using cfiCommon1
        CFI (cfiPicker271) NoFunction
        CFI (cfiPicker271) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond267
        CFI EndBlock cfiCond268
        CFI EndBlock cfiCond269
        CFI EndBlock cfiCond270
        CFI EndBlock cfiPicker271

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond272 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond273 Using cfiCommon0
        CFI (cfiCond273) NoFunction
        CFI (cfiCond273) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond273) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond273) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond273) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond273) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond273) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond273) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond273) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond273) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond273) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond273) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond273) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond273) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond273) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond273) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond273) CFA_SP SP+0
        CFI (cfiCond273) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker274 Using cfiCommon1
        CFI (cfiPicker274) NoFunction
        CFI (cfiPicker274) Picker
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R3,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        RET
        CFI EndBlock cfiCond272
        CFI EndBlock cfiCond273
        CFI EndBlock cfiPicker274

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiCond275 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond276 Using cfiCommon0
        CFI (cfiCond276) NoFunction
        CFI (cfiCond276) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_0
        CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond276) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond276) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond276) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond276) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond276) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond276) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond276) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond276) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond276) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond276) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond276) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond276) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond276) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond276) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond276) CFA_SP SP+0
        CFI (cfiCond276) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiCond277 Using cfiCommon0
        CFI (cfiCond277) NoFunction
        CFI (cfiCond277) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_1
        CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond277) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond277) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond277) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond277) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond277) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond277) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond277) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond277) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond277) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond277) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond277) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond277) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond277) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond277) CFA_SP SP+0
        CFI (cfiCond277) CFA_XSP16 add(XSP16, 80)
        CFI Block cfiPicker278 Using cfiCommon1
        CFI (cfiPicker278) NoFunction
        CFI (cfiPicker278) Picker
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R1,A
        RET
        CFI EndBlock cfiCond275
        CFI EndBlock cfiCond276
        CFI EndBlock cfiCond277
        CFI EndBlock cfiPicker278
// 1350 
// 1351 /**
// 1352  *  @brief      Register a function to be executed on a tap event.
// 1353  *  The tap direction is represented by one of the following:
// 1354  *  \n TAP_X_UP
// 1355  *  \n TAP_X_DOWN
// 1356  *  \n TAP_Y_UP
// 1357  *  \n TAP_Y_DOWN
// 1358  *  \n TAP_Z_UP
// 1359  *  \n TAP_Z_DOWN
// 1360  *  @param[in]  func    Callback function.
// 1361  *  @return     0 if successful.
// 1362  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1363 int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
dmp_register_tap_cb:
        CFI Block cfiBlock279 Using cfiCommon0
        CFI Function dmp_register_tap_cb
        CODE
// 1364 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1365     dmp.tap_cb = func;
        MOV     DPTR,#dmp
        CFI EndBlock cfiBlock279
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6
// 1366     return 0;
// 1367 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiBlock280 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??Subroutine54_0
        CFI EndBlock cfiBlock280

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock281 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        CFI EndBlock cfiBlock281
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine54_0:
        CFI Block cfiBlock282 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock282
// 1368 
// 1369 /**
// 1370  *  @brief      Register a function to be executed on a android orientation event.
// 1371  *  @param[in]  func    Callback function.
// 1372  *  @return     0 if successful.
// 1373  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1374 int dmp_register_android_orient_cb(void (*func)(unsigned char))
dmp_register_android_orient_cb:
        CFI Block cfiBlock283 Using cfiCommon0
        CFI Function dmp_register_android_orient_cb
        CODE
// 1375 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1376     dmp.android_orient_cb = func;
        MOV     DPTR,#dmp + 2
        SJMP    ?Subroutine6
        CFI EndBlock cfiBlock283
// 1377     return 0;
// 1378 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_load_motion_driver_firmware?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_load_motion_driver_firmware

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_orientation?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_orientation

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_gyro_bias?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_gyro_bias

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_accel_bias?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_accel_bias

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_fifo_rate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_fifo_rate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_get_fifo_rate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_get_fifo_rate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_tap_thresh?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_tap_thresh

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_tap_axes?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_tap_axes

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_tap_count?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_tap_count

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_tap_time?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_tap_time

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_tap_time_multi?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_tap_time_multi

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_shake_reject_thresh?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_shake_reject_thresh

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_shake_reject_time?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_shake_reject_time

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_shake_reject_timeout?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_shake_reject_timeout

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_get_pedometer_step_count?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_get_pedometer_step_count

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_pedometer_step_count?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_pedometer_step_count

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_get_pedometer_walk_time?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_get_pedometer_walk_time

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_pedometer_walk_time?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_pedometer_walk_time

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_enable_feature?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_enable_feature

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_get_enabled_features?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_get_enabled_features

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_enable_gyro_cal?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_enable_gyro_cal

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_enable_lp_quat?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_enable_lp_quat

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_enable_6x_lp_quat?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_enable_6x_lp_quat

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_set_interrupt_mode?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_set_interrupt_mode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_read_fifo?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_read_fifo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_register_tap_cb?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_register_tap_cb

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??dmp_register_android_orient_cb?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    dmp_register_android_orient_cb

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {76, 205, 108}>`:
        DB 76
        DB 205
        DB 108

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {12, 201, 44}>`:
        DB 12
        DB 201
        DB 44

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {54, 86, 118}>`:
        DB 54
        DB 86
        DB 118

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {38, 70, 102}>`:
        DB 38
        DB 70
        DB 102

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {254, 242, 171, 196, 170, 241, 223,`:
        DB 254
        DB 242
        DB 171
        DB 196
        DB 170
        DB 241
        DB 223
        DB 223
        DB 187
        DB 175
        DB 223
        DB 223

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {184, 170, 179, 141, 180, 152, 13, `:
        DB 184
        DB 170
        DB 179
        DB 141
        DB 180
        DB 152
        DB 13
        DB 53
        DB 93

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {184, 170, 170, 170, 176, 136, 195,`:
        DB 184
        DB 170
        DB 170
        DB 170
        DB 176
        DB 136
        DB 195
        DB 197
        DB 199

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {216, 177, 185, 243, 139, 163, 145,`:
        DB 216
        DB 177
        DB 185
        DB 243
        DB 139
        DB 163
        DB 145
        DB 182
        DB 9
        DB 180
        DB 217

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {218, 177, 185, 243, 139, 163, 145,`:
        DB 218
        DB 177
        DB 185
        DB 243
        DB 139
        DB 163
        DB 145
        DB 182
        DB 218
        DB 180
        DB 218

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3b86e0:
        DD 3901152

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_43480000:
        DD 43480000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_46800000:
        DD 46800000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_46400000:
        DD 46400000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_46000000:
        DD 46000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_45c00000:
        DD 45C00000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_45800000:
        DD 45800000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_45400000:
        DD 45400000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_45000000:
        DD 45000000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_44c00000:
        DD 44C00000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_14:
        DD 20

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_f1000000:
        DD 4043309056

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2000001:
        DD 33554433

        END
// 1379 
// 1380 /**
// 1381  *  @}
// 1382  */
// 1383 
// 
// 5 891 bytes in segment BANKED_CODE
//   162 bytes in segment BANK_RELAYS
// 3 182 bytes in segment XDATA_ROM_C
//    11 bytes in segment XDATA_Z
// 
// 6 053 bytes of CODE  memory
// 3 126 bytes of CONST memory (+ 56 bytes shared)
//    11 bytes of XDATA memory
//
//Errors: none
//Warnings: 8
